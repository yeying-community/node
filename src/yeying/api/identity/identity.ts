// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: yeying/api/identity/identity.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { ServiceCodeEnum, serviceCodeEnumFromJSON, serviceCodeEnumToJSON } from "../common/code";
import { MessageHeader, ResponseStatus } from "../common/message";

export const protobufPackage = "yeying.api.identity";

export interface DepositRequest {
  header: MessageHeader | undefined;
  body: DepositRequestBody | undefined;
}

export interface DepositRequestBody {
  cipher: string;
  protocol: string;
}

export interface DepositResponse {
  header: MessageHeader | undefined;
  body: DepositResponseBody | undefined;
}

export interface DepositResponseBody {
  status: ResponseStatus | undefined;
}

export interface RetrieveRequest {
  header: MessageHeader | undefined;
}

export interface RetrieveResponse {
  header: MessageHeader | undefined;
}

export interface ShareRequest {
  header: MessageHeader | undefined;
}

export interface ShareResponse {
  header: MessageHeader | undefined;
}

export interface QueryRequest {
  header: MessageHeader | undefined;
  body: QueryRequestBody | undefined;
}

export interface QueryRequestBody {
  serviceCode: ServiceCodeEnum;
}

export interface QueryResponse {
  header: MessageHeader | undefined;
  body: QueryResponseBody | undefined;
}

export interface QueryResponseBody {
  status: ResponseStatus | undefined;
  cipher: string;
  protocol: string;
}

export interface CancelRequest {
  header: MessageHeader | undefined;
  body: CancelRequestBody | undefined;
}

export interface CancelRequestBody {
  did: string;
}

export interface CancelResponse {
  header: MessageHeader | undefined;
  body: CancelResponseBody | undefined;
}

export interface CancelResponseBody {
  status: ResponseStatus | undefined;
}

function createBaseDepositRequest(): DepositRequest {
  return { header: undefined, body: undefined };
}

export const DepositRequest: MessageFns<DepositRequest> = {
  encode(message: DepositRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      DepositRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DepositRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDepositRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = DepositRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DepositRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? DepositRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: DepositRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = DepositRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DepositRequest>, I>>(base?: I): DepositRequest {
    return DepositRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DepositRequest>, I>>(object: I): DepositRequest {
    const message = createBaseDepositRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? DepositRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseDepositRequestBody(): DepositRequestBody {
  return { cipher: "", protocol: "" };
}

export const DepositRequestBody: MessageFns<DepositRequestBody> = {
  encode(message: DepositRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cipher !== "") {
      writer.uint32(10).string(message.cipher);
    }
    if (message.protocol !== "") {
      writer.uint32(18).string(message.protocol);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DepositRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDepositRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cipher = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.protocol = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DepositRequestBody {
    return {
      cipher: isSet(object.cipher) ? globalThis.String(object.cipher) : "",
      protocol: isSet(object.protocol) ? globalThis.String(object.protocol) : "",
    };
  },

  toJSON(message: DepositRequestBody): unknown {
    const obj: any = {};
    if (message.cipher !== "") {
      obj.cipher = message.cipher;
    }
    if (message.protocol !== "") {
      obj.protocol = message.protocol;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DepositRequestBody>, I>>(base?: I): DepositRequestBody {
    return DepositRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DepositRequestBody>, I>>(object: I): DepositRequestBody {
    const message = createBaseDepositRequestBody();
    message.cipher = object.cipher ?? "";
    message.protocol = object.protocol ?? "";
    return message;
  },
};

function createBaseDepositResponse(): DepositResponse {
  return { header: undefined, body: undefined };
}

export const DepositResponse: MessageFns<DepositResponse> = {
  encode(message: DepositResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      DepositResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DepositResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDepositResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = DepositResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DepositResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? DepositResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: DepositResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = DepositResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DepositResponse>, I>>(base?: I): DepositResponse {
    return DepositResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DepositResponse>, I>>(object: I): DepositResponse {
    const message = createBaseDepositResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? DepositResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseDepositResponseBody(): DepositResponseBody {
  return { status: undefined };
}

export const DepositResponseBody: MessageFns<DepositResponseBody> = {
  encode(message: DepositResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DepositResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDepositResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DepositResponseBody {
    return { status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined };
  },

  toJSON(message: DepositResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DepositResponseBody>, I>>(base?: I): DepositResponseBody {
    return DepositResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DepositResponseBody>, I>>(object: I): DepositResponseBody {
    const message = createBaseDepositResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    return message;
  },
};

function createBaseRetrieveRequest(): RetrieveRequest {
  return { header: undefined };
}

export const RetrieveRequest: MessageFns<RetrieveRequest> = {
  encode(message: RetrieveRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RetrieveRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRetrieveRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RetrieveRequest {
    return { header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined };
  },

  toJSON(message: RetrieveRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RetrieveRequest>, I>>(base?: I): RetrieveRequest {
    return RetrieveRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RetrieveRequest>, I>>(object: I): RetrieveRequest {
    const message = createBaseRetrieveRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    return message;
  },
};

function createBaseRetrieveResponse(): RetrieveResponse {
  return { header: undefined };
}

export const RetrieveResponse: MessageFns<RetrieveResponse> = {
  encode(message: RetrieveResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RetrieveResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRetrieveResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RetrieveResponse {
    return { header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined };
  },

  toJSON(message: RetrieveResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RetrieveResponse>, I>>(base?: I): RetrieveResponse {
    return RetrieveResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RetrieveResponse>, I>>(object: I): RetrieveResponse {
    const message = createBaseRetrieveResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    return message;
  },
};

function createBaseShareRequest(): ShareRequest {
  return { header: undefined };
}

export const ShareRequest: MessageFns<ShareRequest> = {
  encode(message: ShareRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShareRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShareRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShareRequest {
    return { header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined };
  },

  toJSON(message: ShareRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShareRequest>, I>>(base?: I): ShareRequest {
    return ShareRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShareRequest>, I>>(object: I): ShareRequest {
    const message = createBaseShareRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    return message;
  },
};

function createBaseShareResponse(): ShareResponse {
  return { header: undefined };
}

export const ShareResponse: MessageFns<ShareResponse> = {
  encode(message: ShareResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShareResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShareResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShareResponse {
    return { header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined };
  },

  toJSON(message: ShareResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShareResponse>, I>>(base?: I): ShareResponse {
    return ShareResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShareResponse>, I>>(object: I): ShareResponse {
    const message = createBaseShareResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    return message;
  },
};

function createBaseQueryRequest(): QueryRequest {
  return { header: undefined, body: undefined };
}

export const QueryRequest: MessageFns<QueryRequest> = {
  encode(message: QueryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      QueryRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = QueryRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? QueryRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: QueryRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = QueryRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRequest>, I>>(base?: I): QueryRequest {
    return QueryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRequest>, I>>(object: I): QueryRequest {
    const message = createBaseQueryRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? QueryRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseQueryRequestBody(): QueryRequestBody {
  return { serviceCode: 0 };
}

export const QueryRequestBody: MessageFns<QueryRequestBody> = {
  encode(message: QueryRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceCode !== 0) {
      writer.uint32(8).int32(message.serviceCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.serviceCode = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRequestBody {
    return { serviceCode: isSet(object.serviceCode) ? serviceCodeEnumFromJSON(object.serviceCode) : 0 };
  },

  toJSON(message: QueryRequestBody): unknown {
    const obj: any = {};
    if (message.serviceCode !== 0) {
      obj.serviceCode = serviceCodeEnumToJSON(message.serviceCode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryRequestBody>, I>>(base?: I): QueryRequestBody {
    return QueryRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryRequestBody>, I>>(object: I): QueryRequestBody {
    const message = createBaseQueryRequestBody();
    message.serviceCode = object.serviceCode ?? 0;
    return message;
  },
};

function createBaseQueryResponse(): QueryResponse {
  return { header: undefined, body: undefined };
}

export const QueryResponse: MessageFns<QueryResponse> = {
  encode(message: QueryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      QueryResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = QueryResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? QueryResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: QueryResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = QueryResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryResponse>, I>>(base?: I): QueryResponse {
    return QueryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryResponse>, I>>(object: I): QueryResponse {
    const message = createBaseQueryResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? QueryResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseQueryResponseBody(): QueryResponseBody {
  return { status: undefined, cipher: "", protocol: "" };
}

export const QueryResponseBody: MessageFns<QueryResponseBody> = {
  encode(message: QueryResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.cipher !== "") {
      writer.uint32(18).string(message.cipher);
    }
    if (message.protocol !== "") {
      writer.uint32(26).string(message.protocol);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cipher = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.protocol = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryResponseBody {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      cipher: isSet(object.cipher) ? globalThis.String(object.cipher) : "",
      protocol: isSet(object.protocol) ? globalThis.String(object.protocol) : "",
    };
  },

  toJSON(message: QueryResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.cipher !== "") {
      obj.cipher = message.cipher;
    }
    if (message.protocol !== "") {
      obj.protocol = message.protocol;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryResponseBody>, I>>(base?: I): QueryResponseBody {
    return QueryResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryResponseBody>, I>>(object: I): QueryResponseBody {
    const message = createBaseQueryResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.cipher = object.cipher ?? "";
    message.protocol = object.protocol ?? "";
    return message;
  },
};

function createBaseCancelRequest(): CancelRequest {
  return { header: undefined, body: undefined };
}

export const CancelRequest: MessageFns<CancelRequest> = {
  encode(message: CancelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      CancelRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = CancelRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? CancelRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: CancelRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = CancelRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CancelRequest>, I>>(base?: I): CancelRequest {
    return CancelRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CancelRequest>, I>>(object: I): CancelRequest {
    const message = createBaseCancelRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? CancelRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseCancelRequestBody(): CancelRequestBody {
  return { did: "" };
}

export const CancelRequestBody: MessageFns<CancelRequestBody> = {
  encode(message: CancelRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.did !== "") {
      writer.uint32(10).string(message.did);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.did = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelRequestBody {
    return { did: isSet(object.did) ? globalThis.String(object.did) : "" };
  },

  toJSON(message: CancelRequestBody): unknown {
    const obj: any = {};
    if (message.did !== "") {
      obj.did = message.did;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CancelRequestBody>, I>>(base?: I): CancelRequestBody {
    return CancelRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CancelRequestBody>, I>>(object: I): CancelRequestBody {
    const message = createBaseCancelRequestBody();
    message.did = object.did ?? "";
    return message;
  },
};

function createBaseCancelResponse(): CancelResponse {
  return { header: undefined, body: undefined };
}

export const CancelResponse: MessageFns<CancelResponse> = {
  encode(message: CancelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      CancelResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = CancelResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? CancelResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: CancelResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = CancelResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CancelResponse>, I>>(base?: I): CancelResponse {
    return CancelResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CancelResponse>, I>>(object: I): CancelResponse {
    const message = createBaseCancelResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? CancelResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseCancelResponseBody(): CancelResponseBody {
  return { status: undefined };
}

export const CancelResponseBody: MessageFns<CancelResponseBody> = {
  encode(message: CancelResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelResponseBody {
    return { status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined };
  },

  toJSON(message: CancelResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CancelResponseBody>, I>>(base?: I): CancelResponseBody {
    return CancelResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CancelResponseBody>, I>>(object: I): CancelResponseBody {
    const message = createBaseCancelResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    return message;
  },
};

/**
 * 提供身份托管和维护服务，目前还不支持托管加密的身份，需要有资质，需要补齐的能力；
 * 1、至少二要素身份认证；
 * 2、保护隐私零知识证名；
 * 2、支持密钥恢复；
 * 3、服务器故障导致丢失，需要支持分散式存储；
 * 4、支持加密硬件；
 * 5、至少要两把密钥，一把由身份所有者保管，一把是服务保管；
 */
export type IdentityService = typeof IdentityService;
export const IdentityService = {
  /** 身份托管 */
  deposit: {
    path: "/yeying.api.identity.Identity/Deposit",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DepositRequest) => Buffer.from(DepositRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DepositRequest.decode(value),
    responseSerialize: (value: DepositResponse) => Buffer.from(DepositResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DepositResponse.decode(value),
  },
  /** 取回身份 */
  retrieve: {
    path: "/yeying.api.identity.Identity/Retrieve",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RetrieveRequest) => Buffer.from(RetrieveRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RetrieveRequest.decode(value),
    responseSerialize: (value: RetrieveResponse) => Buffer.from(RetrieveResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RetrieveResponse.decode(value),
  },
  /** 查询身份名片 */
  query: {
    path: "/yeying.api.identity.Identity/Query",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryRequest) => Buffer.from(QueryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QueryRequest.decode(value),
    responseSerialize: (value: QueryResponse) => Buffer.from(QueryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QueryResponse.decode(value),
  },
  /** 分享身份名片 */
  share: {
    path: "/yeying.api.identity.Identity/Share",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ShareRequest) => Buffer.from(ShareRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ShareRequest.decode(value),
    responseSerialize: (value: ShareResponse) => Buffer.from(ShareResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ShareResponse.decode(value),
  },
  /** 取消托管 */
  cancel: {
    path: "/yeying.api.identity.Identity/Cancel",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CancelRequest) => Buffer.from(CancelRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CancelRequest.decode(value),
    responseSerialize: (value: CancelResponse) => Buffer.from(CancelResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CancelResponse.decode(value),
  },
} as const;

export interface IdentityServer extends UntypedServiceImplementation {
  /** 身份托管 */
  deposit: handleUnaryCall<DepositRequest, DepositResponse>;
  /** 取回身份 */
  retrieve: handleUnaryCall<RetrieveRequest, RetrieveResponse>;
  /** 查询身份名片 */
  query: handleUnaryCall<QueryRequest, QueryResponse>;
  /** 分享身份名片 */
  share: handleUnaryCall<ShareRequest, ShareResponse>;
  /** 取消托管 */
  cancel: handleUnaryCall<CancelRequest, CancelResponse>;
}

export interface IdentityClient extends Client {
  /** 身份托管 */
  deposit(
    request: DepositRequest,
    callback: (error: ServiceError | null, response: DepositResponse) => void,
  ): ClientUnaryCall;
  deposit(
    request: DepositRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DepositResponse) => void,
  ): ClientUnaryCall;
  deposit(
    request: DepositRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DepositResponse) => void,
  ): ClientUnaryCall;
  /** 取回身份 */
  retrieve(
    request: RetrieveRequest,
    callback: (error: ServiceError | null, response: RetrieveResponse) => void,
  ): ClientUnaryCall;
  retrieve(
    request: RetrieveRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RetrieveResponse) => void,
  ): ClientUnaryCall;
  retrieve(
    request: RetrieveRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RetrieveResponse) => void,
  ): ClientUnaryCall;
  /** 查询身份名片 */
  query(
    request: QueryRequest,
    callback: (error: ServiceError | null, response: QueryResponse) => void,
  ): ClientUnaryCall;
  query(
    request: QueryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryResponse) => void,
  ): ClientUnaryCall;
  query(
    request: QueryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryResponse) => void,
  ): ClientUnaryCall;
  /** 分享身份名片 */
  share(
    request: ShareRequest,
    callback: (error: ServiceError | null, response: ShareResponse) => void,
  ): ClientUnaryCall;
  share(
    request: ShareRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ShareResponse) => void,
  ): ClientUnaryCall;
  share(
    request: ShareRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ShareResponse) => void,
  ): ClientUnaryCall;
  /** 取消托管 */
  cancel(
    request: CancelRequest,
    callback: (error: ServiceError | null, response: CancelResponse) => void,
  ): ClientUnaryCall;
  cancel(
    request: CancelRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CancelResponse) => void,
  ): ClientUnaryCall;
  cancel(
    request: CancelRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CancelResponse) => void,
  ): ClientUnaryCall;
}

export const IdentityClient = makeGenericClientConstructor(
  IdentityService,
  "yeying.api.identity.Identity",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): IdentityClient;
  service: typeof IdentityService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
