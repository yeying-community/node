// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: yeying/api/service/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { ServiceCodeEnum, serviceCodeEnumFromJSON, serviceCodeEnumToJSON } from "../common/code";
import { MessageHeader, RequestPage, ResponsePage, ResponseStatus } from "../common/message";
import { ServiceMetadata } from "../common/model";

export const protobufPackage = "yeying.api.service";

/** create */
export interface CreateServiceRequest {
  header: MessageHeader | undefined;
  body: CreateServiceRequestBody | undefined;
}

export interface CreateServiceRequestBody {
  /** 创建服务元信息入参 */
  service: ServiceMetadata | undefined;
}

export interface CreateServiceResponse {
  header: MessageHeader | undefined;
  body: CreateServiceResponseBody | undefined;
}

export interface CreateServiceResponseBody {
  status: ResponseStatus | undefined;
  service: ServiceMetadata | undefined;
}

/** detail */
export interface DetailServiceRequest {
  header: MessageHeader | undefined;
  body: DetailServiceRequestBody | undefined;
}

export interface DetailServiceRequestBody {
  /** 服务身份 did */
  did: string;
  /** 服务版本 */
  version: number;
}

export interface DetailServiceResponse {
  header: MessageHeader | undefined;
  body: DetailServiceResponseBody | undefined;
}

export interface DetailServiceResponseBody {
  status: ResponseStatus | undefined;
  service: ServiceMetadata | undefined;
}

/** search */
export interface SearchServiceRequest {
  header: MessageHeader | undefined;
  body: SearchServiceRequestBody | undefined;
}

export interface SearchServiceRequestBody {
  condition: SearchServiceCondition | undefined;
  page: RequestPage | undefined;
}

export interface SearchServiceCondition {
  /** 服务类型【参数可选】 */
  code: ServiceCodeEnum;
  /** 服务所有者【参数可选】 */
  owner: string;
  /** 服务名称【参数可选】 */
  name: string;
  /** 输入[服务所有者、服务名称]关键字搜索【参数可选】 */
  keyword: string;
}

export interface SearchServiceResponse {
  header: MessageHeader | undefined;
  body: SearchServiceResponseBody | undefined;
}

export interface SearchServiceResponseBody {
  status: ResponseStatus | undefined;
  services: ServiceMetadata[];
  page: ResponsePage | undefined;
}

/** delete */
export interface DeleteServiceRequest {
  header: MessageHeader | undefined;
  body: DeleteServiceRequestBody | undefined;
}

export interface DeleteServiceRequestBody {
  did: string;
  version: number;
}

export interface DeleteServiceResponse {
  header: MessageHeader | undefined;
  body: DeleteServiceResponseBody | undefined;
}

export interface DeleteServiceResponseBody {
  status: ResponseStatus | undefined;
}

function createBaseCreateServiceRequest(): CreateServiceRequest {
  return { header: undefined, body: undefined };
}

export const CreateServiceRequest: MessageFns<CreateServiceRequest> = {
  encode(message: CreateServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      CreateServiceRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = CreateServiceRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateServiceRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? CreateServiceRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: CreateServiceRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = CreateServiceRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateServiceRequest>, I>>(base?: I): CreateServiceRequest {
    return CreateServiceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateServiceRequest>, I>>(object: I): CreateServiceRequest {
    const message = createBaseCreateServiceRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? CreateServiceRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseCreateServiceRequestBody(): CreateServiceRequestBody {
  return { service: undefined };
}

export const CreateServiceRequestBody: MessageFns<CreateServiceRequestBody> = {
  encode(message: CreateServiceRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service !== undefined) {
      ServiceMetadata.encode(message.service, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateServiceRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateServiceRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.service = ServiceMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateServiceRequestBody {
    return { service: isSet(object.service) ? ServiceMetadata.fromJSON(object.service) : undefined };
  },

  toJSON(message: CreateServiceRequestBody): unknown {
    const obj: any = {};
    if (message.service !== undefined) {
      obj.service = ServiceMetadata.toJSON(message.service);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateServiceRequestBody>, I>>(base?: I): CreateServiceRequestBody {
    return CreateServiceRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateServiceRequestBody>, I>>(object: I): CreateServiceRequestBody {
    const message = createBaseCreateServiceRequestBody();
    message.service = (object.service !== undefined && object.service !== null)
      ? ServiceMetadata.fromPartial(object.service)
      : undefined;
    return message;
  },
};

function createBaseCreateServiceResponse(): CreateServiceResponse {
  return { header: undefined, body: undefined };
}

export const CreateServiceResponse: MessageFns<CreateServiceResponse> = {
  encode(message: CreateServiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      CreateServiceResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateServiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateServiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = CreateServiceResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateServiceResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? CreateServiceResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: CreateServiceResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = CreateServiceResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateServiceResponse>, I>>(base?: I): CreateServiceResponse {
    return CreateServiceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateServiceResponse>, I>>(object: I): CreateServiceResponse {
    const message = createBaseCreateServiceResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? CreateServiceResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseCreateServiceResponseBody(): CreateServiceResponseBody {
  return { status: undefined, service: undefined };
}

export const CreateServiceResponseBody: MessageFns<CreateServiceResponseBody> = {
  encode(message: CreateServiceResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.service !== undefined) {
      ServiceMetadata.encode(message.service, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateServiceResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateServiceResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.service = ServiceMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateServiceResponseBody {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      service: isSet(object.service) ? ServiceMetadata.fromJSON(object.service) : undefined,
    };
  },

  toJSON(message: CreateServiceResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.service !== undefined) {
      obj.service = ServiceMetadata.toJSON(message.service);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateServiceResponseBody>, I>>(base?: I): CreateServiceResponseBody {
    return CreateServiceResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateServiceResponseBody>, I>>(object: I): CreateServiceResponseBody {
    const message = createBaseCreateServiceResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.service = (object.service !== undefined && object.service !== null)
      ? ServiceMetadata.fromPartial(object.service)
      : undefined;
    return message;
  },
};

function createBaseDetailServiceRequest(): DetailServiceRequest {
  return { header: undefined, body: undefined };
}

export const DetailServiceRequest: MessageFns<DetailServiceRequest> = {
  encode(message: DetailServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      DetailServiceRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DetailServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetailServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = DetailServiceRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DetailServiceRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? DetailServiceRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: DetailServiceRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = DetailServiceRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DetailServiceRequest>, I>>(base?: I): DetailServiceRequest {
    return DetailServiceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DetailServiceRequest>, I>>(object: I): DetailServiceRequest {
    const message = createBaseDetailServiceRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? DetailServiceRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseDetailServiceRequestBody(): DetailServiceRequestBody {
  return { did: "", version: 0 };
}

export const DetailServiceRequestBody: MessageFns<DetailServiceRequestBody> = {
  encode(message: DetailServiceRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.did !== "") {
      writer.uint32(10).string(message.did);
    }
    if (message.version !== 0) {
      writer.uint32(16).uint32(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DetailServiceRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetailServiceRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.did = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.version = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DetailServiceRequestBody {
    return {
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
    };
  },

  toJSON(message: DetailServiceRequestBody): unknown {
    const obj: any = {};
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DetailServiceRequestBody>, I>>(base?: I): DetailServiceRequestBody {
    return DetailServiceRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DetailServiceRequestBody>, I>>(object: I): DetailServiceRequestBody {
    const message = createBaseDetailServiceRequestBody();
    message.did = object.did ?? "";
    message.version = object.version ?? 0;
    return message;
  },
};

function createBaseDetailServiceResponse(): DetailServiceResponse {
  return { header: undefined, body: undefined };
}

export const DetailServiceResponse: MessageFns<DetailServiceResponse> = {
  encode(message: DetailServiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      DetailServiceResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DetailServiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetailServiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = DetailServiceResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DetailServiceResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? DetailServiceResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: DetailServiceResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = DetailServiceResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DetailServiceResponse>, I>>(base?: I): DetailServiceResponse {
    return DetailServiceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DetailServiceResponse>, I>>(object: I): DetailServiceResponse {
    const message = createBaseDetailServiceResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? DetailServiceResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseDetailServiceResponseBody(): DetailServiceResponseBody {
  return { status: undefined, service: undefined };
}

export const DetailServiceResponseBody: MessageFns<DetailServiceResponseBody> = {
  encode(message: DetailServiceResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.service !== undefined) {
      ServiceMetadata.encode(message.service, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DetailServiceResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetailServiceResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.service = ServiceMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DetailServiceResponseBody {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      service: isSet(object.service) ? ServiceMetadata.fromJSON(object.service) : undefined,
    };
  },

  toJSON(message: DetailServiceResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.service !== undefined) {
      obj.service = ServiceMetadata.toJSON(message.service);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DetailServiceResponseBody>, I>>(base?: I): DetailServiceResponseBody {
    return DetailServiceResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DetailServiceResponseBody>, I>>(object: I): DetailServiceResponseBody {
    const message = createBaseDetailServiceResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.service = (object.service !== undefined && object.service !== null)
      ? ServiceMetadata.fromPartial(object.service)
      : undefined;
    return message;
  },
};

function createBaseSearchServiceRequest(): SearchServiceRequest {
  return { header: undefined, body: undefined };
}

export const SearchServiceRequest: MessageFns<SearchServiceRequest> = {
  encode(message: SearchServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      SearchServiceRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = SearchServiceRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchServiceRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? SearchServiceRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SearchServiceRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = SearchServiceRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchServiceRequest>, I>>(base?: I): SearchServiceRequest {
    return SearchServiceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchServiceRequest>, I>>(object: I): SearchServiceRequest {
    const message = createBaseSearchServiceRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? SearchServiceRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSearchServiceRequestBody(): SearchServiceRequestBody {
  return { condition: undefined, page: undefined };
}

export const SearchServiceRequestBody: MessageFns<SearchServiceRequestBody> = {
  encode(message: SearchServiceRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.condition !== undefined) {
      SearchServiceCondition.encode(message.condition, writer.uint32(10).fork()).join();
    }
    if (message.page !== undefined) {
      RequestPage.encode(message.page, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchServiceRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchServiceRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.condition = SearchServiceCondition.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.page = RequestPage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchServiceRequestBody {
    return {
      condition: isSet(object.condition) ? SearchServiceCondition.fromJSON(object.condition) : undefined,
      page: isSet(object.page) ? RequestPage.fromJSON(object.page) : undefined,
    };
  },

  toJSON(message: SearchServiceRequestBody): unknown {
    const obj: any = {};
    if (message.condition !== undefined) {
      obj.condition = SearchServiceCondition.toJSON(message.condition);
    }
    if (message.page !== undefined) {
      obj.page = RequestPage.toJSON(message.page);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchServiceRequestBody>, I>>(base?: I): SearchServiceRequestBody {
    return SearchServiceRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchServiceRequestBody>, I>>(object: I): SearchServiceRequestBody {
    const message = createBaseSearchServiceRequestBody();
    message.condition = (object.condition !== undefined && object.condition !== null)
      ? SearchServiceCondition.fromPartial(object.condition)
      : undefined;
    message.page = (object.page !== undefined && object.page !== null)
      ? RequestPage.fromPartial(object.page)
      : undefined;
    return message;
  },
};

function createBaseSearchServiceCondition(): SearchServiceCondition {
  return { code: 0, owner: "", name: "", keyword: "" };
}

export const SearchServiceCondition: MessageFns<SearchServiceCondition> = {
  encode(message: SearchServiceCondition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.owner !== "") {
      writer.uint32(18).string(message.owner);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.keyword !== "") {
      writer.uint32(34).string(message.keyword);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchServiceCondition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchServiceCondition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.keyword = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchServiceCondition {
    return {
      code: isSet(object.code) ? serviceCodeEnumFromJSON(object.code) : 0,
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      keyword: isSet(object.keyword) ? globalThis.String(object.keyword) : "",
    };
  },

  toJSON(message: SearchServiceCondition): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = serviceCodeEnumToJSON(message.code);
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.keyword !== "") {
      obj.keyword = message.keyword;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchServiceCondition>, I>>(base?: I): SearchServiceCondition {
    return SearchServiceCondition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchServiceCondition>, I>>(object: I): SearchServiceCondition {
    const message = createBaseSearchServiceCondition();
    message.code = object.code ?? 0;
    message.owner = object.owner ?? "";
    message.name = object.name ?? "";
    message.keyword = object.keyword ?? "";
    return message;
  },
};

function createBaseSearchServiceResponse(): SearchServiceResponse {
  return { header: undefined, body: undefined };
}

export const SearchServiceResponse: MessageFns<SearchServiceResponse> = {
  encode(message: SearchServiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      SearchServiceResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchServiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchServiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = SearchServiceResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchServiceResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? SearchServiceResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SearchServiceResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = SearchServiceResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchServiceResponse>, I>>(base?: I): SearchServiceResponse {
    return SearchServiceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchServiceResponse>, I>>(object: I): SearchServiceResponse {
    const message = createBaseSearchServiceResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? SearchServiceResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSearchServiceResponseBody(): SearchServiceResponseBody {
  return { status: undefined, services: [], page: undefined };
}

export const SearchServiceResponseBody: MessageFns<SearchServiceResponseBody> = {
  encode(message: SearchServiceResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    for (const v of message.services) {
      ServiceMetadata.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.page !== undefined) {
      ResponsePage.encode(message.page, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchServiceResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchServiceResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.services.push(ServiceMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.page = ResponsePage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchServiceResponseBody {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      services: globalThis.Array.isArray(object?.services)
        ? object.services.map((e: any) => ServiceMetadata.fromJSON(e))
        : [],
      page: isSet(object.page) ? ResponsePage.fromJSON(object.page) : undefined,
    };
  },

  toJSON(message: SearchServiceResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.services?.length) {
      obj.services = message.services.map((e) => ServiceMetadata.toJSON(e));
    }
    if (message.page !== undefined) {
      obj.page = ResponsePage.toJSON(message.page);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchServiceResponseBody>, I>>(base?: I): SearchServiceResponseBody {
    return SearchServiceResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchServiceResponseBody>, I>>(object: I): SearchServiceResponseBody {
    const message = createBaseSearchServiceResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.services = object.services?.map((e) => ServiceMetadata.fromPartial(e)) || [];
    message.page = (object.page !== undefined && object.page !== null)
      ? ResponsePage.fromPartial(object.page)
      : undefined;
    return message;
  },
};

function createBaseDeleteServiceRequest(): DeleteServiceRequest {
  return { header: undefined, body: undefined };
}

export const DeleteServiceRequest: MessageFns<DeleteServiceRequest> = {
  encode(message: DeleteServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      DeleteServiceRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = DeleteServiceRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteServiceRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? DeleteServiceRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: DeleteServiceRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = DeleteServiceRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteServiceRequest>, I>>(base?: I): DeleteServiceRequest {
    return DeleteServiceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteServiceRequest>, I>>(object: I): DeleteServiceRequest {
    const message = createBaseDeleteServiceRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? DeleteServiceRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseDeleteServiceRequestBody(): DeleteServiceRequestBody {
  return { did: "", version: 0 };
}

export const DeleteServiceRequestBody: MessageFns<DeleteServiceRequestBody> = {
  encode(message: DeleteServiceRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.did !== "") {
      writer.uint32(10).string(message.did);
    }
    if (message.version !== 0) {
      writer.uint32(16).uint32(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteServiceRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteServiceRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.did = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.version = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteServiceRequestBody {
    return {
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
    };
  },

  toJSON(message: DeleteServiceRequestBody): unknown {
    const obj: any = {};
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteServiceRequestBody>, I>>(base?: I): DeleteServiceRequestBody {
    return DeleteServiceRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteServiceRequestBody>, I>>(object: I): DeleteServiceRequestBody {
    const message = createBaseDeleteServiceRequestBody();
    message.did = object.did ?? "";
    message.version = object.version ?? 0;
    return message;
  },
};

function createBaseDeleteServiceResponse(): DeleteServiceResponse {
  return { header: undefined, body: undefined };
}

export const DeleteServiceResponse: MessageFns<DeleteServiceResponse> = {
  encode(message: DeleteServiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      DeleteServiceResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteServiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteServiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = DeleteServiceResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteServiceResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? DeleteServiceResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: DeleteServiceResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = DeleteServiceResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteServiceResponse>, I>>(base?: I): DeleteServiceResponse {
    return DeleteServiceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteServiceResponse>, I>>(object: I): DeleteServiceResponse {
    const message = createBaseDeleteServiceResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? DeleteServiceResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseDeleteServiceResponseBody(): DeleteServiceResponseBody {
  return { status: undefined };
}

export const DeleteServiceResponseBody: MessageFns<DeleteServiceResponseBody> = {
  encode(message: DeleteServiceResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteServiceResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteServiceResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteServiceResponseBody {
    return { status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined };
  },

  toJSON(message: DeleteServiceResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteServiceResponseBody>, I>>(base?: I): DeleteServiceResponseBody {
    return DeleteServiceResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteServiceResponseBody>, I>>(object: I): DeleteServiceResponseBody {
    const message = createBaseDeleteServiceResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    return message;
  },
};

/** 节点提供服务创建、上线、下线和查询的服务。 */
export type ServiceService = typeof ServiceService;
export const ServiceService = {
  /** 服务创建 */
  create: {
    path: "/yeying.api.service.Service/Create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateServiceRequest) => Buffer.from(CreateServiceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateServiceRequest.decode(value),
    responseSerialize: (value: CreateServiceResponse) => Buffer.from(CreateServiceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateServiceResponse.decode(value),
  },
  /** 服务详情 */
  detail: {
    path: "/yeying.api.service.Service/Detail",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DetailServiceRequest) => Buffer.from(DetailServiceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DetailServiceRequest.decode(value),
    responseSerialize: (value: DetailServiceResponse) => Buffer.from(DetailServiceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DetailServiceResponse.decode(value),
  },
  /** 搜索服务 */
  search: {
    path: "/yeying.api.service.Service/Search",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SearchServiceRequest) => Buffer.from(SearchServiceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SearchServiceRequest.decode(value),
    responseSerialize: (value: SearchServiceResponse) => Buffer.from(SearchServiceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SearchServiceResponse.decode(value),
  },
  /** 删除服务 */
  delete: {
    path: "/yeying.api.service.Service/Delete",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteServiceRequest) => Buffer.from(DeleteServiceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteServiceRequest.decode(value),
    responseSerialize: (value: DeleteServiceResponse) => Buffer.from(DeleteServiceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteServiceResponse.decode(value),
  },
} as const;

export interface ServiceServer extends UntypedServiceImplementation {
  /** 服务创建 */
  create: handleUnaryCall<CreateServiceRequest, CreateServiceResponse>;
  /** 服务详情 */
  detail: handleUnaryCall<DetailServiceRequest, DetailServiceResponse>;
  /** 搜索服务 */
  search: handleUnaryCall<SearchServiceRequest, SearchServiceResponse>;
  /** 删除服务 */
  delete: handleUnaryCall<DeleteServiceRequest, DeleteServiceResponse>;
}

export interface ServiceClient extends Client {
  /** 服务创建 */
  create(
    request: CreateServiceRequest,
    callback: (error: ServiceError | null, response: CreateServiceResponse) => void,
  ): ClientUnaryCall;
  create(
    request: CreateServiceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateServiceResponse) => void,
  ): ClientUnaryCall;
  create(
    request: CreateServiceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateServiceResponse) => void,
  ): ClientUnaryCall;
  /** 服务详情 */
  detail(
    request: DetailServiceRequest,
    callback: (error: ServiceError | null, response: DetailServiceResponse) => void,
  ): ClientUnaryCall;
  detail(
    request: DetailServiceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DetailServiceResponse) => void,
  ): ClientUnaryCall;
  detail(
    request: DetailServiceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DetailServiceResponse) => void,
  ): ClientUnaryCall;
  /** 搜索服务 */
  search(
    request: SearchServiceRequest,
    callback: (error: ServiceError | null, response: SearchServiceResponse) => void,
  ): ClientUnaryCall;
  search(
    request: SearchServiceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SearchServiceResponse) => void,
  ): ClientUnaryCall;
  search(
    request: SearchServiceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SearchServiceResponse) => void,
  ): ClientUnaryCall;
  /** 删除服务 */
  delete(
    request: DeleteServiceRequest,
    callback: (error: ServiceError | null, response: DeleteServiceResponse) => void,
  ): ClientUnaryCall;
  delete(
    request: DeleteServiceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteServiceResponse) => void,
  ): ClientUnaryCall;
  delete(
    request: DeleteServiceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteServiceResponse) => void,
  ): ClientUnaryCall;
}

export const ServiceClient = makeGenericClientConstructor(ServiceService, "yeying.api.service.Service") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ServiceClient;
  service: typeof ServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
