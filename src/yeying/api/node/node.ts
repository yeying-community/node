// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: yeying/api/node/node.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { MessageHeader, ResponseStatus } from "../common/message";
import { ServiceMetadata } from "../common/model";

export const protobufPackage = "yeying.api.node";

export interface HealthCheckRequest {
  header: MessageHeader | undefined;
}

export interface HealthCheckResponse {
  header: MessageHeader | undefined;
  body: HealthCheckResponseBody | undefined;
}

export interface HealthCheckResponseBody {
  status: ResponseStatus | undefined;
}

export interface WhoamiRequest {
  header: MessageHeader | undefined;
}

export interface WhoamiResponse {
  header: MessageHeader | undefined;
  body: WhoamiResponseBody | undefined;
}

export interface WhoamiResponseBody {
  status: ResponseStatus | undefined;
  service: ServiceMetadata | undefined;
}

function createBaseHealthCheckRequest(): HealthCheckRequest {
  return { header: undefined };
}

export const HealthCheckRequest: MessageFns<HealthCheckRequest> = {
  encode(message: HealthCheckRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthCheckRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthCheckRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthCheckRequest {
    return { header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined };
  },

  toJSON(message: HealthCheckRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthCheckRequest>, I>>(base?: I): HealthCheckRequest {
    return HealthCheckRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthCheckRequest>, I>>(object: I): HealthCheckRequest {
    const message = createBaseHealthCheckRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    return message;
  },
};

function createBaseHealthCheckResponse(): HealthCheckResponse {
  return { header: undefined, body: undefined };
}

export const HealthCheckResponse: MessageFns<HealthCheckResponse> = {
  encode(message: HealthCheckResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      HealthCheckResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthCheckResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthCheckResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = HealthCheckResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthCheckResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? HealthCheckResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: HealthCheckResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = HealthCheckResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthCheckResponse>, I>>(base?: I): HealthCheckResponse {
    return HealthCheckResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthCheckResponse>, I>>(object: I): HealthCheckResponse {
    const message = createBaseHealthCheckResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? HealthCheckResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseHealthCheckResponseBody(): HealthCheckResponseBody {
  return { status: undefined };
}

export const HealthCheckResponseBody: MessageFns<HealthCheckResponseBody> = {
  encode(message: HealthCheckResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthCheckResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthCheckResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthCheckResponseBody {
    return { status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined };
  },

  toJSON(message: HealthCheckResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthCheckResponseBody>, I>>(base?: I): HealthCheckResponseBody {
    return HealthCheckResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthCheckResponseBody>, I>>(object: I): HealthCheckResponseBody {
    const message = createBaseHealthCheckResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    return message;
  },
};

function createBaseWhoamiRequest(): WhoamiRequest {
  return { header: undefined };
}

export const WhoamiRequest: MessageFns<WhoamiRequest> = {
  encode(message: WhoamiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WhoamiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWhoamiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WhoamiRequest {
    return { header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined };
  },

  toJSON(message: WhoamiRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WhoamiRequest>, I>>(base?: I): WhoamiRequest {
    return WhoamiRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WhoamiRequest>, I>>(object: I): WhoamiRequest {
    const message = createBaseWhoamiRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    return message;
  },
};

function createBaseWhoamiResponse(): WhoamiResponse {
  return { header: undefined, body: undefined };
}

export const WhoamiResponse: MessageFns<WhoamiResponse> = {
  encode(message: WhoamiResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      WhoamiResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WhoamiResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWhoamiResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = WhoamiResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WhoamiResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? WhoamiResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: WhoamiResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = WhoamiResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WhoamiResponse>, I>>(base?: I): WhoamiResponse {
    return WhoamiResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WhoamiResponse>, I>>(object: I): WhoamiResponse {
    const message = createBaseWhoamiResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? WhoamiResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseWhoamiResponseBody(): WhoamiResponseBody {
  return { status: undefined, service: undefined };
}

export const WhoamiResponseBody: MessageFns<WhoamiResponseBody> = {
  encode(message: WhoamiResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.service !== undefined) {
      ServiceMetadata.encode(message.service, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WhoamiResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWhoamiResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.service = ServiceMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WhoamiResponseBody {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      service: isSet(object.service) ? ServiceMetadata.fromJSON(object.service) : undefined,
    };
  },

  toJSON(message: WhoamiResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.service !== undefined) {
      obj.service = ServiceMetadata.toJSON(message.service);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WhoamiResponseBody>, I>>(base?: I): WhoamiResponseBody {
    return WhoamiResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WhoamiResponseBody>, I>>(object: I): WhoamiResponseBody {
    const message = createBaseWhoamiResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.service = (object.service !== undefined && object.service !== null)
      ? ServiceMetadata.fromPartial(object.service)
      : undefined;
    return message;
  },
};

/** 每一个服务都是一个节点，提供通用的接口 */
export type NodeService = typeof NodeService;
export const NodeService = {
  healthCheck: {
    path: "/yeying.api.node.Node/HealthCheck",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: HealthCheckRequest) => Buffer.from(HealthCheckRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => HealthCheckRequest.decode(value),
    responseSerialize: (value: HealthCheckResponse) => Buffer.from(HealthCheckResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => HealthCheckResponse.decode(value),
  },
  whoami: {
    path: "/yeying.api.node.Node/Whoami",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: WhoamiRequest) => Buffer.from(WhoamiRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => WhoamiRequest.decode(value),
    responseSerialize: (value: WhoamiResponse) => Buffer.from(WhoamiResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => WhoamiResponse.decode(value),
  },
} as const;

export interface NodeServer extends UntypedServiceImplementation {
  healthCheck: handleUnaryCall<HealthCheckRequest, HealthCheckResponse>;
  whoami: handleUnaryCall<WhoamiRequest, WhoamiResponse>;
}

export interface NodeClient extends Client {
  healthCheck(
    request: HealthCheckRequest,
    callback: (error: ServiceError | null, response: HealthCheckResponse) => void,
  ): ClientUnaryCall;
  healthCheck(
    request: HealthCheckRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: HealthCheckResponse) => void,
  ): ClientUnaryCall;
  healthCheck(
    request: HealthCheckRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: HealthCheckResponse) => void,
  ): ClientUnaryCall;
  whoami(
    request: WhoamiRequest,
    callback: (error: ServiceError | null, response: WhoamiResponse) => void,
  ): ClientUnaryCall;
  whoami(
    request: WhoamiRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: WhoamiResponse) => void,
  ): ClientUnaryCall;
  whoami(
    request: WhoamiRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: WhoamiResponse) => void,
  ): ClientUnaryCall;
}

export const NodeClient = makeGenericClientConstructor(NodeService, "yeying.api.node.Node") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): NodeClient;
  service: typeof NodeService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
