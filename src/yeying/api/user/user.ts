// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: yeying/api/user/user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Int32Value } from "../../../google/protobuf/wrappers";
import { MessageHeader, ResponseStatus } from "../common/message";

export const protobufPackage = "yeying.api.user";

export enum UserStatusEnum {
  /** USER_STATUS_UNKNOWN - 未知编码，是一种占位符 */
  USER_STATUS_UNKNOWN = 0,
  /** USER_STATUS_ACTIVE - 活跃：表示用户目前正在使用软件并与其进行交互 */
  USER_STATUS_ACTIVE = 1,
  /** USER_STATUS_OFFLINE - 离线：表示用户当前不处于活跃状态，但可能会随时返回 */
  USER_STATUS_OFFLINE = 2,
  /** USER_STATUS_DISABLE - 禁用：表示用户的访问权限被暂时或永久性地限制 */
  USER_STATUS_DISABLE = 3,
  /** USER_STATUS_LOCK - 锁定：表示用户的账户被暂时性地冻结，通常是由于安全原因 */
  USER_STATUS_LOCK = 4,
  /** USER_STATUS_UNVERIFIED - 未验证：表示用户账户在创建后尚未通过验证 */
  USER_STATUS_UNVERIFIED = 5,
  /** USER_STATUS_DELETED - 删除：表示用户账户已经被永久删除，无法恢复 */
  USER_STATUS_DELETED = 6,
  /** USER_STATUS_DORMANT - 休眠：表示用户账户由于长时间未活跃而被标记为休眠状态 */
  USER_STATUS_DORMANT = 7,
  /** USER_STATUS_FREEZE - 冻结：表示用户账户在一段时间内暂时不可用 */
  USER_STATUS_FREEZE = 8,
  /** USER_STATUS_AUDIT - 待审核：表示新用户注册后正在等待管理员或审核人员审批 */
  USER_STATUS_AUDIT = 9,
  /** USER_STATUS_REFUSED - 审核未通过：表示管理员或审核人员拒绝了用户的注册请求 */
  USER_STATUS_REFUSED = 10,
  UNRECOGNIZED = -1,
}

export function userStatusEnumFromJSON(object: any): UserStatusEnum {
  switch (object) {
    case 0:
    case "USER_STATUS_UNKNOWN":
      return UserStatusEnum.USER_STATUS_UNKNOWN;
    case 1:
    case "USER_STATUS_ACTIVE":
      return UserStatusEnum.USER_STATUS_ACTIVE;
    case 2:
    case "USER_STATUS_OFFLINE":
      return UserStatusEnum.USER_STATUS_OFFLINE;
    case 3:
    case "USER_STATUS_DISABLE":
      return UserStatusEnum.USER_STATUS_DISABLE;
    case 4:
    case "USER_STATUS_LOCK":
      return UserStatusEnum.USER_STATUS_LOCK;
    case 5:
    case "USER_STATUS_UNVERIFIED":
      return UserStatusEnum.USER_STATUS_UNVERIFIED;
    case 6:
    case "USER_STATUS_DELETED":
      return UserStatusEnum.USER_STATUS_DELETED;
    case 7:
    case "USER_STATUS_DORMANT":
      return UserStatusEnum.USER_STATUS_DORMANT;
    case 8:
    case "USER_STATUS_FREEZE":
      return UserStatusEnum.USER_STATUS_FREEZE;
    case 9:
    case "USER_STATUS_AUDIT":
      return UserStatusEnum.USER_STATUS_AUDIT;
    case 10:
    case "USER_STATUS_REFUSED":
      return UserStatusEnum.USER_STATUS_REFUSED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserStatusEnum.UNRECOGNIZED;
  }
}

export function userStatusEnumToJSON(object: UserStatusEnum): string {
  switch (object) {
    case UserStatusEnum.USER_STATUS_UNKNOWN:
      return "USER_STATUS_UNKNOWN";
    case UserStatusEnum.USER_STATUS_ACTIVE:
      return "USER_STATUS_ACTIVE";
    case UserStatusEnum.USER_STATUS_OFFLINE:
      return "USER_STATUS_OFFLINE";
    case UserStatusEnum.USER_STATUS_DISABLE:
      return "USER_STATUS_DISABLE";
    case UserStatusEnum.USER_STATUS_LOCK:
      return "USER_STATUS_LOCK";
    case UserStatusEnum.USER_STATUS_UNVERIFIED:
      return "USER_STATUS_UNVERIFIED";
    case UserStatusEnum.USER_STATUS_DELETED:
      return "USER_STATUS_DELETED";
    case UserStatusEnum.USER_STATUS_DORMANT:
      return "USER_STATUS_DORMANT";
    case UserStatusEnum.USER_STATUS_FREEZE:
      return "USER_STATUS_FREEZE";
    case UserStatusEnum.USER_STATUS_AUDIT:
      return "USER_STATUS_AUDIT";
    case UserStatusEnum.USER_STATUS_REFUSED:
      return "USER_STATUS_REFUSED";
    case UserStatusEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum UserRoleEnum {
  /** USER_ROLE_UNKNOWN - 未知编码，是一种占位符 */
  USER_ROLE_UNKNOWN = 0,
  /** USER_ROLE_OWNER - 所有者 */
  USER_ROLE_OWNER = 1,
  /** USER_ROLE_NORMAL - 普通用户 */
  USER_ROLE_NORMAL = 2,
  UNRECOGNIZED = -1,
}

export function userRoleEnumFromJSON(object: any): UserRoleEnum {
  switch (object) {
    case 0:
    case "USER_ROLE_UNKNOWN":
      return UserRoleEnum.USER_ROLE_UNKNOWN;
    case 1:
    case "USER_ROLE_OWNER":
      return UserRoleEnum.USER_ROLE_OWNER;
    case 2:
    case "USER_ROLE_NORMAL":
      return UserRoleEnum.USER_ROLE_NORMAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserRoleEnum.UNRECOGNIZED;
  }
}

export function userRoleEnumToJSON(object: UserRoleEnum): string {
  switch (object) {
    case UserRoleEnum.USER_ROLE_UNKNOWN:
      return "USER_ROLE_UNKNOWN";
    case UserRoleEnum.USER_ROLE_OWNER:
      return "USER_ROLE_OWNER";
    case UserRoleEnum.USER_ROLE_NORMAL:
      return "USER_ROLE_NORMAL";
    case UserRoleEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface UpdateStatusRequest {
  header: MessageHeader | undefined;
  body: UpdateStatusRequestBody | undefined;
}

export interface UpdateStatusRequestBody {
  /** 用户did */
  did: string;
  /** 用户状态，冻结/正常 */
  status: UserStatusEnum;
}

export interface UpdateStatusResponse {
  header: MessageHeader | undefined;
  body: UpdateStatusResponseBody | undefined;
}

export interface UpdateStatusResponseBody {
  status: ResponseStatus | undefined;
}

export interface UserListRequest {
  header: MessageHeader | undefined;
  body: UserListRequestBody | undefined;
}

export interface UserListRequestBody {
  /** 当前页 */
  pageIndex:
    | number
    | undefined;
  /** 每页大小 */
  pageSize: number | undefined;
}

export interface UserListResponse {
  header: MessageHeader | undefined;
  body: UserListResponseBody | undefined;
}

export interface UserListResponseBody {
  status: ResponseStatus | undefined;
  list: UserDetail[];
  /** 总数 */
  total: number;
}

export interface UserMetadata {
  did: string;
  name: string;
  avatar: string;
  createdAt: string;
  updatedAt: string;
  signature: string;
  telephone: string;
  email: string;
}

export interface UserState {
  owner: string;
  did: string;
  role: UserRoleEnum;
  status: UserStatusEnum;
  createdAt: string;
  updatedAt: string;
  signature: string;
}

export interface AddUserRequest {
  header: MessageHeader | undefined;
  body: AddUserRequestBody | undefined;
}

export interface AddUserRequestBody {
  user: UserMetadata | undefined;
}

export interface AddUserResponse {
  header: MessageHeader | undefined;
  body: AddUserResponseBody | undefined;
}

export interface AddUserResponseBody {
  status: ResponseStatus | undefined;
  user: UserMetadata | undefined;
}

export interface UpdateUserRequest {
  header: MessageHeader | undefined;
  body: UpdateUserRequestBody | undefined;
}

export interface UpdateUserRequestBody {
  user: UserMetadata | undefined;
}

export interface UpdateUserResponse {
  header: MessageHeader | undefined;
  body: UpdateUserResponseBody | undefined;
}

export interface UpdateUserResponseBody {
  status: ResponseStatus | undefined;
  user: UserMetadata | undefined;
}

export interface DeleteUserRequest {
  header: MessageHeader | undefined;
}

export interface DeleteUserResponse {
  header: MessageHeader | undefined;
  body: DeleteUserResponseBody | undefined;
}

export interface DeleteUserResponseBody {
  status: ResponseStatus | undefined;
}

export interface UserDetailRequest {
  header: MessageHeader | undefined;
}

export interface UserDetailResponse {
  header: MessageHeader | undefined;
  body: UserDetailResponseBody | undefined;
}

export interface UserDetailResponseBody {
  status: ResponseStatus | undefined;
  detail: UserDetail | undefined;
}

export interface UserDetail {
  user: UserMetadata | undefined;
  state: UserState | undefined;
}

function createBaseUpdateStatusRequest(): UpdateStatusRequest {
  return { header: undefined, body: undefined };
}

export const UpdateStatusRequest: MessageFns<UpdateStatusRequest> = {
  encode(message: UpdateStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      UpdateStatusRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = UpdateStatusRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateStatusRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? UpdateStatusRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: UpdateStatusRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = UpdateStatusRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateStatusRequest>, I>>(base?: I): UpdateStatusRequest {
    return UpdateStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateStatusRequest>, I>>(object: I): UpdateStatusRequest {
    const message = createBaseUpdateStatusRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? UpdateStatusRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseUpdateStatusRequestBody(): UpdateStatusRequestBody {
  return { did: "", status: 0 };
}

export const UpdateStatusRequestBody: MessageFns<UpdateStatusRequestBody> = {
  encode(message: UpdateStatusRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.did !== "") {
      writer.uint32(10).string(message.did);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateStatusRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateStatusRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.did = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateStatusRequestBody {
    return {
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      status: isSet(object.status) ? userStatusEnumFromJSON(object.status) : 0,
    };
  },

  toJSON(message: UpdateStatusRequestBody): unknown {
    const obj: any = {};
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.status !== 0) {
      obj.status = userStatusEnumToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateStatusRequestBody>, I>>(base?: I): UpdateStatusRequestBody {
    return UpdateStatusRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateStatusRequestBody>, I>>(object: I): UpdateStatusRequestBody {
    const message = createBaseUpdateStatusRequestBody();
    message.did = object.did ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseUpdateStatusResponse(): UpdateStatusResponse {
  return { header: undefined, body: undefined };
}

export const UpdateStatusResponse: MessageFns<UpdateStatusResponse> = {
  encode(message: UpdateStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      UpdateStatusResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = UpdateStatusResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateStatusResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? UpdateStatusResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: UpdateStatusResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = UpdateStatusResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateStatusResponse>, I>>(base?: I): UpdateStatusResponse {
    return UpdateStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateStatusResponse>, I>>(object: I): UpdateStatusResponse {
    const message = createBaseUpdateStatusResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? UpdateStatusResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseUpdateStatusResponseBody(): UpdateStatusResponseBody {
  return { status: undefined };
}

export const UpdateStatusResponseBody: MessageFns<UpdateStatusResponseBody> = {
  encode(message: UpdateStatusResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateStatusResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateStatusResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateStatusResponseBody {
    return { status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined };
  },

  toJSON(message: UpdateStatusResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateStatusResponseBody>, I>>(base?: I): UpdateStatusResponseBody {
    return UpdateStatusResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateStatusResponseBody>, I>>(object: I): UpdateStatusResponseBody {
    const message = createBaseUpdateStatusResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    return message;
  },
};

function createBaseUserListRequest(): UserListRequest {
  return { header: undefined, body: undefined };
}

export const UserListRequest: MessageFns<UserListRequest> = {
  encode(message: UserListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      UserListRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = UserListRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserListRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? UserListRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: UserListRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = UserListRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserListRequest>, I>>(base?: I): UserListRequest {
    return UserListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserListRequest>, I>>(object: I): UserListRequest {
    const message = createBaseUserListRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? UserListRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseUserListRequestBody(): UserListRequestBody {
  return { pageIndex: undefined, pageSize: undefined };
}

export const UserListRequestBody: MessageFns<UserListRequestBody> = {
  encode(message: UserListRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageIndex !== undefined) {
      Int32Value.encode({ value: message.pageIndex! }, writer.uint32(26).fork()).join();
    }
    if (message.pageSize !== undefined) {
      Int32Value.encode({ value: message.pageSize! }, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserListRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserListRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pageIndex = Int32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.pageSize = Int32Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserListRequestBody {
    return {
      pageIndex: isSet(object.pageIndex) ? Number(object.pageIndex) : undefined,
      pageSize: isSet(object.pageSize) ? Number(object.pageSize) : undefined,
    };
  },

  toJSON(message: UserListRequestBody): unknown {
    const obj: any = {};
    if (message.pageIndex !== undefined) {
      obj.pageIndex = message.pageIndex;
    }
    if (message.pageSize !== undefined) {
      obj.pageSize = message.pageSize;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserListRequestBody>, I>>(base?: I): UserListRequestBody {
    return UserListRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserListRequestBody>, I>>(object: I): UserListRequestBody {
    const message = createBaseUserListRequestBody();
    message.pageIndex = object.pageIndex ?? undefined;
    message.pageSize = object.pageSize ?? undefined;
    return message;
  },
};

function createBaseUserListResponse(): UserListResponse {
  return { header: undefined, body: undefined };
}

export const UserListResponse: MessageFns<UserListResponse> = {
  encode(message: UserListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      UserListResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = UserListResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserListResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? UserListResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: UserListResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = UserListResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserListResponse>, I>>(base?: I): UserListResponse {
    return UserListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserListResponse>, I>>(object: I): UserListResponse {
    const message = createBaseUserListResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? UserListResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseUserListResponseBody(): UserListResponseBody {
  return { status: undefined, list: [], total: 0 };
}

export const UserListResponseBody: MessageFns<UserListResponseBody> = {
  encode(message: UserListResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    for (const v of message.list) {
      UserDetail.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.total !== 0) {
      writer.uint32(24).uint64(message.total);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserListResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserListResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.list.push(UserDetail.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.total = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserListResponseBody {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      list: globalThis.Array.isArray(object?.list) ? object.list.map((e: any) => UserDetail.fromJSON(e)) : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: UserListResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.list?.length) {
      obj.list = message.list.map((e) => UserDetail.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserListResponseBody>, I>>(base?: I): UserListResponseBody {
    return UserListResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserListResponseBody>, I>>(object: I): UserListResponseBody {
    const message = createBaseUserListResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.list = object.list?.map((e) => UserDetail.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    return message;
  },
};

function createBaseUserMetadata(): UserMetadata {
  return { did: "", name: "", avatar: "", createdAt: "", updatedAt: "", signature: "", telephone: "", email: "" };
}

export const UserMetadata: MessageFns<UserMetadata> = {
  encode(message: UserMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.did !== "") {
      writer.uint32(10).string(message.did);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.avatar !== "") {
      writer.uint32(26).string(message.avatar);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(42).string(message.updatedAt);
    }
    if (message.signature !== "") {
      writer.uint32(50).string(message.signature);
    }
    if (message.telephone !== "") {
      writer.uint32(58).string(message.telephone);
    }
    if (message.email !== "") {
      writer.uint32(66).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.did = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.avatar = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.telephone = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserMetadata {
    return {
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      telephone: isSet(object.telephone) ? globalThis.String(object.telephone) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
    };
  },

  toJSON(message: UserMetadata): unknown {
    const obj: any = {};
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    if (message.telephone !== "") {
      obj.telephone = message.telephone;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserMetadata>, I>>(base?: I): UserMetadata {
    return UserMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserMetadata>, I>>(object: I): UserMetadata {
    const message = createBaseUserMetadata();
    message.did = object.did ?? "";
    message.name = object.name ?? "";
    message.avatar = object.avatar ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    message.signature = object.signature ?? "";
    message.telephone = object.telephone ?? "";
    message.email = object.email ?? "";
    return message;
  },
};

function createBaseUserState(): UserState {
  return { owner: "", did: "", role: 0, status: 0, createdAt: "", updatedAt: "", signature: "" };
}

export const UserState: MessageFns<UserState> = {
  encode(message: UserState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.did !== "") {
      writer.uint32(18).string(message.did);
    }
    if (message.role !== 0) {
      writer.uint32(24).int32(message.role);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.createdAt !== "") {
      writer.uint32(42).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(50).string(message.updatedAt);
    }
    if (message.signature !== "") {
      writer.uint32(58).string(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.did = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.role = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserState {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      role: isSet(object.role) ? userRoleEnumFromJSON(object.role) : 0,
      status: isSet(object.status) ? userStatusEnumFromJSON(object.status) : 0,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
    };
  },

  toJSON(message: UserState): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.role !== 0) {
      obj.role = userRoleEnumToJSON(message.role);
    }
    if (message.status !== 0) {
      obj.status = userStatusEnumToJSON(message.status);
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserState>, I>>(base?: I): UserState {
    return UserState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserState>, I>>(object: I): UserState {
    const message = createBaseUserState();
    message.owner = object.owner ?? "";
    message.did = object.did ?? "";
    message.role = object.role ?? 0;
    message.status = object.status ?? 0;
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    message.signature = object.signature ?? "";
    return message;
  },
};

function createBaseAddUserRequest(): AddUserRequest {
  return { header: undefined, body: undefined };
}

export const AddUserRequest: MessageFns<AddUserRequest> = {
  encode(message: AddUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      AddUserRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = AddUserRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddUserRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? AddUserRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: AddUserRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = AddUserRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddUserRequest>, I>>(base?: I): AddUserRequest {
    return AddUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddUserRequest>, I>>(object: I): AddUserRequest {
    const message = createBaseAddUserRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? AddUserRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseAddUserRequestBody(): AddUserRequestBody {
  return { user: undefined };
}

export const AddUserRequestBody: MessageFns<AddUserRequestBody> = {
  encode(message: AddUserRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      UserMetadata.encode(message.user, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddUserRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddUserRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = UserMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddUserRequestBody {
    return { user: isSet(object.user) ? UserMetadata.fromJSON(object.user) : undefined };
  },

  toJSON(message: AddUserRequestBody): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = UserMetadata.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddUserRequestBody>, I>>(base?: I): AddUserRequestBody {
    return AddUserRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddUserRequestBody>, I>>(object: I): AddUserRequestBody {
    const message = createBaseAddUserRequestBody();
    message.user = (object.user !== undefined && object.user !== null)
      ? UserMetadata.fromPartial(object.user)
      : undefined;
    return message;
  },
};

function createBaseAddUserResponse(): AddUserResponse {
  return { header: undefined, body: undefined };
}

export const AddUserResponse: MessageFns<AddUserResponse> = {
  encode(message: AddUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      AddUserResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = AddUserResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddUserResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? AddUserResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: AddUserResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = AddUserResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddUserResponse>, I>>(base?: I): AddUserResponse {
    return AddUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddUserResponse>, I>>(object: I): AddUserResponse {
    const message = createBaseAddUserResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? AddUserResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseAddUserResponseBody(): AddUserResponseBody {
  return { status: undefined, user: undefined };
}

export const AddUserResponseBody: MessageFns<AddUserResponseBody> = {
  encode(message: AddUserResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.user !== undefined) {
      UserMetadata.encode(message.user, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddUserResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddUserResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user = UserMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddUserResponseBody {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      user: isSet(object.user) ? UserMetadata.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: AddUserResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.user !== undefined) {
      obj.user = UserMetadata.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddUserResponseBody>, I>>(base?: I): AddUserResponseBody {
    return AddUserResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddUserResponseBody>, I>>(object: I): AddUserResponseBody {
    const message = createBaseAddUserResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.user = (object.user !== undefined && object.user !== null)
      ? UserMetadata.fromPartial(object.user)
      : undefined;
    return message;
  },
};

function createBaseUpdateUserRequest(): UpdateUserRequest {
  return { header: undefined, body: undefined };
}

export const UpdateUserRequest: MessageFns<UpdateUserRequest> = {
  encode(message: UpdateUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      UpdateUserRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = UpdateUserRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? UpdateUserRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: UpdateUserRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = UpdateUserRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserRequest>, I>>(base?: I): UpdateUserRequest {
    return UpdateUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserRequest>, I>>(object: I): UpdateUserRequest {
    const message = createBaseUpdateUserRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? UpdateUserRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseUpdateUserRequestBody(): UpdateUserRequestBody {
  return { user: undefined };
}

export const UpdateUserRequestBody: MessageFns<UpdateUserRequestBody> = {
  encode(message: UpdateUserRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      UserMetadata.encode(message.user, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = UserMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserRequestBody {
    return { user: isSet(object.user) ? UserMetadata.fromJSON(object.user) : undefined };
  },

  toJSON(message: UpdateUserRequestBody): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = UserMetadata.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserRequestBody>, I>>(base?: I): UpdateUserRequestBody {
    return UpdateUserRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserRequestBody>, I>>(object: I): UpdateUserRequestBody {
    const message = createBaseUpdateUserRequestBody();
    message.user = (object.user !== undefined && object.user !== null)
      ? UserMetadata.fromPartial(object.user)
      : undefined;
    return message;
  },
};

function createBaseUpdateUserResponse(): UpdateUserResponse {
  return { header: undefined, body: undefined };
}

export const UpdateUserResponse: MessageFns<UpdateUserResponse> = {
  encode(message: UpdateUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      UpdateUserResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = UpdateUserResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? UpdateUserResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: UpdateUserResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = UpdateUserResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserResponse>, I>>(base?: I): UpdateUserResponse {
    return UpdateUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserResponse>, I>>(object: I): UpdateUserResponse {
    const message = createBaseUpdateUserResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? UpdateUserResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseUpdateUserResponseBody(): UpdateUserResponseBody {
  return { status: undefined, user: undefined };
}

export const UpdateUserResponseBody: MessageFns<UpdateUserResponseBody> = {
  encode(message: UpdateUserResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.user !== undefined) {
      UserMetadata.encode(message.user, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user = UserMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserResponseBody {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      user: isSet(object.user) ? UserMetadata.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: UpdateUserResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.user !== undefined) {
      obj.user = UserMetadata.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserResponseBody>, I>>(base?: I): UpdateUserResponseBody {
    return UpdateUserResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserResponseBody>, I>>(object: I): UpdateUserResponseBody {
    const message = createBaseUpdateUserResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.user = (object.user !== undefined && object.user !== null)
      ? UserMetadata.fromPartial(object.user)
      : undefined;
    return message;
  },
};

function createBaseDeleteUserRequest(): DeleteUserRequest {
  return { header: undefined };
}

export const DeleteUserRequest: MessageFns<DeleteUserRequest> = {
  encode(message: DeleteUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteUserRequest {
    return { header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined };
  },

  toJSON(message: DeleteUserRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteUserRequest>, I>>(base?: I): DeleteUserRequest {
    return DeleteUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteUserRequest>, I>>(object: I): DeleteUserRequest {
    const message = createBaseDeleteUserRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    return message;
  },
};

function createBaseDeleteUserResponse(): DeleteUserResponse {
  return { header: undefined, body: undefined };
}

export const DeleteUserResponse: MessageFns<DeleteUserResponse> = {
  encode(message: DeleteUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      DeleteUserResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = DeleteUserResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteUserResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? DeleteUserResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: DeleteUserResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = DeleteUserResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteUserResponse>, I>>(base?: I): DeleteUserResponse {
    return DeleteUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteUserResponse>, I>>(object: I): DeleteUserResponse {
    const message = createBaseDeleteUserResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? DeleteUserResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseDeleteUserResponseBody(): DeleteUserResponseBody {
  return { status: undefined };
}

export const DeleteUserResponseBody: MessageFns<DeleteUserResponseBody> = {
  encode(message: DeleteUserResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteUserResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteUserResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteUserResponseBody {
    return { status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined };
  },

  toJSON(message: DeleteUserResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteUserResponseBody>, I>>(base?: I): DeleteUserResponseBody {
    return DeleteUserResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteUserResponseBody>, I>>(object: I): DeleteUserResponseBody {
    const message = createBaseDeleteUserResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    return message;
  },
};

function createBaseUserDetailRequest(): UserDetailRequest {
  return { header: undefined };
}

export const UserDetailRequest: MessageFns<UserDetailRequest> = {
  encode(message: UserDetailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserDetailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserDetailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserDetailRequest {
    return { header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined };
  },

  toJSON(message: UserDetailRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserDetailRequest>, I>>(base?: I): UserDetailRequest {
    return UserDetailRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserDetailRequest>, I>>(object: I): UserDetailRequest {
    const message = createBaseUserDetailRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    return message;
  },
};

function createBaseUserDetailResponse(): UserDetailResponse {
  return { header: undefined, body: undefined };
}

export const UserDetailResponse: MessageFns<UserDetailResponse> = {
  encode(message: UserDetailResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      UserDetailResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserDetailResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserDetailResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = UserDetailResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserDetailResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? UserDetailResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: UserDetailResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = UserDetailResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserDetailResponse>, I>>(base?: I): UserDetailResponse {
    return UserDetailResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserDetailResponse>, I>>(object: I): UserDetailResponse {
    const message = createBaseUserDetailResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? UserDetailResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseUserDetailResponseBody(): UserDetailResponseBody {
  return { status: undefined, detail: undefined };
}

export const UserDetailResponseBody: MessageFns<UserDetailResponseBody> = {
  encode(message: UserDetailResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.detail !== undefined) {
      UserDetail.encode(message.detail, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserDetailResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserDetailResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.detail = UserDetail.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserDetailResponseBody {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      detail: isSet(object.detail) ? UserDetail.fromJSON(object.detail) : undefined,
    };
  },

  toJSON(message: UserDetailResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.detail !== undefined) {
      obj.detail = UserDetail.toJSON(message.detail);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserDetailResponseBody>, I>>(base?: I): UserDetailResponseBody {
    return UserDetailResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserDetailResponseBody>, I>>(object: I): UserDetailResponseBody {
    const message = createBaseUserDetailResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.detail = (object.detail !== undefined && object.detail !== null)
      ? UserDetail.fromPartial(object.detail)
      : undefined;
    return message;
  },
};

function createBaseUserDetail(): UserDetail {
  return { user: undefined, state: undefined };
}

export const UserDetail: MessageFns<UserDetail> = {
  encode(message: UserDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      UserMetadata.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.state !== undefined) {
      UserState.encode(message.state, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = UserMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.state = UserState.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserDetail {
    return {
      user: isSet(object.user) ? UserMetadata.fromJSON(object.user) : undefined,
      state: isSet(object.state) ? UserState.fromJSON(object.state) : undefined,
    };
  },

  toJSON(message: UserDetail): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = UserMetadata.toJSON(message.user);
    }
    if (message.state !== undefined) {
      obj.state = UserState.toJSON(message.state);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserDetail>, I>>(base?: I): UserDetail {
    return UserDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserDetail>, I>>(object: I): UserDetail {
    const message = createBaseUserDetail();
    message.user = (object.user !== undefined && object.user !== null)
      ? UserMetadata.fromPartial(object.user)
      : undefined;
    message.state = (object.state !== undefined && object.state !== null)
      ? UserState.fromPartial(object.state)
      : undefined;
    return message;
  },
};

export type UserService = typeof UserService;
export const UserService = {
  /** 添加用户 */
  add: {
    path: "/yeying.api.user.User/Add",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddUserRequest) => Buffer.from(AddUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddUserRequest.decode(value),
    responseSerialize: (value: AddUserResponse) => Buffer.from(AddUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AddUserResponse.decode(value),
  },
  /** 获取用户 */
  detail: {
    path: "/yeying.api.user.User/Detail",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UserDetailRequest) => Buffer.from(UserDetailRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UserDetailRequest.decode(value),
    responseSerialize: (value: UserDetailResponse) => Buffer.from(UserDetailResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UserDetailResponse.decode(value),
  },
  /** 用户列表 */
  list: {
    path: "/yeying.api.user.User/List",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UserListRequest) => Buffer.from(UserListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UserListRequest.decode(value),
    responseSerialize: (value: UserListResponse) => Buffer.from(UserListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UserListResponse.decode(value),
  },
  /** 删除用户 */
  delete: {
    path: "/yeying.api.user.User/Delete",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteUserRequest) => Buffer.from(DeleteUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteUserRequest.decode(value),
    responseSerialize: (value: DeleteUserResponse) => Buffer.from(DeleteUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteUserResponse.decode(value),
  },
  /** 修改用户信息 */
  update: {
    path: "/yeying.api.user.User/Update",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateUserRequest) => Buffer.from(UpdateUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateUserRequest.decode(value),
    responseSerialize: (value: UpdateUserResponse) => Buffer.from(UpdateUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateUserResponse.decode(value),
  },
  /** 修改用户状态，冻结/解冻 */
  updateStatus: {
    path: "/yeying.api.user.User/UpdateStatus",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateStatusRequest) => Buffer.from(UpdateStatusRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateStatusRequest.decode(value),
    responseSerialize: (value: UpdateStatusResponse) => Buffer.from(UpdateStatusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateStatusResponse.decode(value),
  },
} as const;

export interface UserServer extends UntypedServiceImplementation {
  /** 添加用户 */
  add: handleUnaryCall<AddUserRequest, AddUserResponse>;
  /** 获取用户 */
  detail: handleUnaryCall<UserDetailRequest, UserDetailResponse>;
  /** 用户列表 */
  list: handleUnaryCall<UserListRequest, UserListResponse>;
  /** 删除用户 */
  delete: handleUnaryCall<DeleteUserRequest, DeleteUserResponse>;
  /** 修改用户信息 */
  update: handleUnaryCall<UpdateUserRequest, UpdateUserResponse>;
  /** 修改用户状态，冻结/解冻 */
  updateStatus: handleUnaryCall<UpdateStatusRequest, UpdateStatusResponse>;
}

export interface UserClient extends Client {
  /** 添加用户 */
  add(
    request: AddUserRequest,
    callback: (error: ServiceError | null, response: AddUserResponse) => void,
  ): ClientUnaryCall;
  add(
    request: AddUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddUserResponse) => void,
  ): ClientUnaryCall;
  add(
    request: AddUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddUserResponse) => void,
  ): ClientUnaryCall;
  /** 获取用户 */
  detail(
    request: UserDetailRequest,
    callback: (error: ServiceError | null, response: UserDetailResponse) => void,
  ): ClientUnaryCall;
  detail(
    request: UserDetailRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserDetailResponse) => void,
  ): ClientUnaryCall;
  detail(
    request: UserDetailRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserDetailResponse) => void,
  ): ClientUnaryCall;
  /** 用户列表 */
  list(
    request: UserListRequest,
    callback: (error: ServiceError | null, response: UserListResponse) => void,
  ): ClientUnaryCall;
  list(
    request: UserListRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserListResponse) => void,
  ): ClientUnaryCall;
  list(
    request: UserListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserListResponse) => void,
  ): ClientUnaryCall;
  /** 删除用户 */
  delete(
    request: DeleteUserRequest,
    callback: (error: ServiceError | null, response: DeleteUserResponse) => void,
  ): ClientUnaryCall;
  delete(
    request: DeleteUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteUserResponse) => void,
  ): ClientUnaryCall;
  delete(
    request: DeleteUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteUserResponse) => void,
  ): ClientUnaryCall;
  /** 修改用户信息 */
  update(
    request: UpdateUserRequest,
    callback: (error: ServiceError | null, response: UpdateUserResponse) => void,
  ): ClientUnaryCall;
  update(
    request: UpdateUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateUserResponse) => void,
  ): ClientUnaryCall;
  update(
    request: UpdateUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateUserResponse) => void,
  ): ClientUnaryCall;
  /** 修改用户状态，冻结/解冻 */
  updateStatus(
    request: UpdateStatusRequest,
    callback: (error: ServiceError | null, response: UpdateStatusResponse) => void,
  ): ClientUnaryCall;
  updateStatus(
    request: UpdateStatusRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateStatusResponse) => void,
  ): ClientUnaryCall;
  updateStatus(
    request: UpdateStatusRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateStatusResponse) => void,
  ): ClientUnaryCall;
}

export const UserClient = makeGenericClientConstructor(UserService, "yeying.api.user.User") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserClient;
  service: typeof UserService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
