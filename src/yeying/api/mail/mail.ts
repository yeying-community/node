// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: yeying/api/mail/mail.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { MessageHeader, ResponseStatus } from "../common/message";

export const protobufPackage = "yeying.api.mail";

/** 邮件请求 */
export interface SendMailRequest {
  header: MessageHeader | undefined;
  body: SendMailRequestBody | undefined;
}

export interface SendMailRequestBody {
  /** 收件箱 */
  toMail: string;
}

/** 邮件相应 */
export interface SendMailResponse {
  header: MessageHeader | undefined;
  body: SendMailResponseBody | undefined;
}

export interface SendMailResponseBody {
  status: ResponseStatus | undefined;
}

/** 验证码验证请求体 */
export interface VerifyMailRequest {
  header: MessageHeader | undefined;
  body: VerifyMailRequestBody | undefined;
}

export interface VerifyMailRequestBody {
  /** 收件箱 */
  toMail: string;
  code: string;
}

/** 验证码验证响应体 */
export interface VerifyMailResponse {
  header: MessageHeader | undefined;
  body: VerifyMailResponseBody | undefined;
}

export interface VerifyMailResponseBody {
  status: ResponseStatus | undefined;
}

function createBaseSendMailRequest(): SendMailRequest {
  return { header: undefined, body: undefined };
}

export const SendMailRequest: MessageFns<SendMailRequest> = {
  encode(message: SendMailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      SendMailRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendMailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendMailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = SendMailRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendMailRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? SendMailRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SendMailRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = SendMailRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendMailRequest>, I>>(base?: I): SendMailRequest {
    return SendMailRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendMailRequest>, I>>(object: I): SendMailRequest {
    const message = createBaseSendMailRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? SendMailRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSendMailRequestBody(): SendMailRequestBody {
  return { toMail: "" };
}

export const SendMailRequestBody: MessageFns<SendMailRequestBody> = {
  encode(message: SendMailRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.toMail !== "") {
      writer.uint32(10).string(message.toMail);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendMailRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendMailRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.toMail = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendMailRequestBody {
    return { toMail: isSet(object.toMail) ? globalThis.String(object.toMail) : "" };
  },

  toJSON(message: SendMailRequestBody): unknown {
    const obj: any = {};
    if (message.toMail !== "") {
      obj.toMail = message.toMail;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendMailRequestBody>, I>>(base?: I): SendMailRequestBody {
    return SendMailRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendMailRequestBody>, I>>(object: I): SendMailRequestBody {
    const message = createBaseSendMailRequestBody();
    message.toMail = object.toMail ?? "";
    return message;
  },
};

function createBaseSendMailResponse(): SendMailResponse {
  return { header: undefined, body: undefined };
}

export const SendMailResponse: MessageFns<SendMailResponse> = {
  encode(message: SendMailResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      SendMailResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendMailResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendMailResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = SendMailResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendMailResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? SendMailResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SendMailResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = SendMailResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendMailResponse>, I>>(base?: I): SendMailResponse {
    return SendMailResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendMailResponse>, I>>(object: I): SendMailResponse {
    const message = createBaseSendMailResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? SendMailResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSendMailResponseBody(): SendMailResponseBody {
  return { status: undefined };
}

export const SendMailResponseBody: MessageFns<SendMailResponseBody> = {
  encode(message: SendMailResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendMailResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendMailResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendMailResponseBody {
    return { status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined };
  },

  toJSON(message: SendMailResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendMailResponseBody>, I>>(base?: I): SendMailResponseBody {
    return SendMailResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendMailResponseBody>, I>>(object: I): SendMailResponseBody {
    const message = createBaseSendMailResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    return message;
  },
};

function createBaseVerifyMailRequest(): VerifyMailRequest {
  return { header: undefined, body: undefined };
}

export const VerifyMailRequest: MessageFns<VerifyMailRequest> = {
  encode(message: VerifyMailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      VerifyMailRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyMailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyMailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = VerifyMailRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyMailRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? VerifyMailRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: VerifyMailRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = VerifyMailRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyMailRequest>, I>>(base?: I): VerifyMailRequest {
    return VerifyMailRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyMailRequest>, I>>(object: I): VerifyMailRequest {
    const message = createBaseVerifyMailRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? VerifyMailRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseVerifyMailRequestBody(): VerifyMailRequestBody {
  return { toMail: "", code: "" };
}

export const VerifyMailRequestBody: MessageFns<VerifyMailRequestBody> = {
  encode(message: VerifyMailRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.toMail !== "") {
      writer.uint32(10).string(message.toMail);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyMailRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyMailRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.toMail = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyMailRequestBody {
    return {
      toMail: isSet(object.toMail) ? globalThis.String(object.toMail) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
    };
  },

  toJSON(message: VerifyMailRequestBody): unknown {
    const obj: any = {};
    if (message.toMail !== "") {
      obj.toMail = message.toMail;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyMailRequestBody>, I>>(base?: I): VerifyMailRequestBody {
    return VerifyMailRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyMailRequestBody>, I>>(object: I): VerifyMailRequestBody {
    const message = createBaseVerifyMailRequestBody();
    message.toMail = object.toMail ?? "";
    message.code = object.code ?? "";
    return message;
  },
};

function createBaseVerifyMailResponse(): VerifyMailResponse {
  return { header: undefined, body: undefined };
}

export const VerifyMailResponse: MessageFns<VerifyMailResponse> = {
  encode(message: VerifyMailResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      VerifyMailResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyMailResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyMailResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = VerifyMailResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyMailResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? VerifyMailResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: VerifyMailResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = VerifyMailResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyMailResponse>, I>>(base?: I): VerifyMailResponse {
    return VerifyMailResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyMailResponse>, I>>(object: I): VerifyMailResponse {
    const message = createBaseVerifyMailResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? VerifyMailResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseVerifyMailResponseBody(): VerifyMailResponseBody {
  return { status: undefined };
}

export const VerifyMailResponseBody: MessageFns<VerifyMailResponseBody> = {
  encode(message: VerifyMailResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyMailResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyMailResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyMailResponseBody {
    return { status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined };
  },

  toJSON(message: VerifyMailResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyMailResponseBody>, I>>(base?: I): VerifyMailResponseBody {
    return VerifyMailResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyMailResponseBody>, I>>(object: I): VerifyMailResponseBody {
    const message = createBaseVerifyMailResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    return message;
  },
};

/** 定义一个邮件服务 */
export type MailService = typeof MailService;
export const MailService = {
  send: {
    path: "/yeying.api.mail.Mail/Send",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SendMailRequest) => Buffer.from(SendMailRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SendMailRequest.decode(value),
    responseSerialize: (value: SendMailResponse) => Buffer.from(SendMailResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SendMailResponse.decode(value),
  },
  verify: {
    path: "/yeying.api.mail.Mail/Verify",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: VerifyMailRequest) => Buffer.from(VerifyMailRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => VerifyMailRequest.decode(value),
    responseSerialize: (value: VerifyMailResponse) => Buffer.from(VerifyMailResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => VerifyMailResponse.decode(value),
  },
} as const;

export interface MailServer extends UntypedServiceImplementation {
  send: handleUnaryCall<SendMailRequest, SendMailResponse>;
  verify: handleUnaryCall<VerifyMailRequest, VerifyMailResponse>;
}

export interface MailClient extends Client {
  send(
    request: SendMailRequest,
    callback: (error: ServiceError | null, response: SendMailResponse) => void,
  ): ClientUnaryCall;
  send(
    request: SendMailRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SendMailResponse) => void,
  ): ClientUnaryCall;
  send(
    request: SendMailRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SendMailResponse) => void,
  ): ClientUnaryCall;
  verify(
    request: VerifyMailRequest,
    callback: (error: ServiceError | null, response: VerifyMailResponse) => void,
  ): ClientUnaryCall;
  verify(
    request: VerifyMailRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: VerifyMailResponse) => void,
  ): ClientUnaryCall;
  verify(
    request: VerifyMailRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: VerifyMailResponse) => void,
  ): ClientUnaryCall;
}

export const MailClient = makeGenericClientConstructor(MailService, "yeying.api.mail.Mail") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): MailClient;
  service: typeof MailService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
