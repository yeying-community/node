// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: yeying/api/bulletin/bulletin.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { LanguageCodeEnum, languageCodeEnumFromJSON, languageCodeEnumToJSON } from "../common/code";
import { MessageHeader, RequestPage, ResponsePage, ResponseStatus } from "../common/message";

export const protobufPackage = "yeying.api.bulletin";

export enum BulletinCodeEnum {
  BULLETIN_CODE_SOLUTION = 0,
  UNRECOGNIZED = -1,
}

export function bulletinCodeEnumFromJSON(object: any): BulletinCodeEnum {
  switch (object) {
    case 0:
    case "BULLETIN_CODE_SOLUTION":
      return BulletinCodeEnum.BULLETIN_CODE_SOLUTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BulletinCodeEnum.UNRECOGNIZED;
  }
}

export function bulletinCodeEnumToJSON(object: BulletinCodeEnum): string {
  switch (object) {
    case BulletinCodeEnum.BULLETIN_CODE_SOLUTION:
      return "BULLETIN_CODE_SOLUTION";
    case BulletinCodeEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BulletinListRequest {
  header: MessageHeader | undefined;
  body: BulletinListRequestBody | undefined;
}

export interface BulletinListRequestBody {
  code: BulletinCodeEnum;
  language: LanguageCodeEnum;
  page: RequestPage | undefined;
}

export interface BulletinListResponse {
  header: MessageHeader | undefined;
  body: BulletinListResponseBody | undefined;
}

export interface BulletinListResponseBody {
  status: ResponseStatus | undefined;
  solutions: SolutionMetadata[];
  page: ResponsePage | undefined;
}

export interface SolutionMetadata {
  publisher: string;
  language: LanguageCodeEnum;
  uid: string;
  name: string;
  description: string;
  createdAt: string;
  cards: SolutionCard[];
  signature: string;
}

export interface SolutionCard {
  name: string;
  price: string;
  variables: string;
}

function createBaseBulletinListRequest(): BulletinListRequest {
  return { header: undefined, body: undefined };
}

export const BulletinListRequest: MessageFns<BulletinListRequest> = {
  encode(message: BulletinListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      BulletinListRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BulletinListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulletinListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = BulletinListRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulletinListRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? BulletinListRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: BulletinListRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = BulletinListRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BulletinListRequest>, I>>(base?: I): BulletinListRequest {
    return BulletinListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulletinListRequest>, I>>(object: I): BulletinListRequest {
    const message = createBaseBulletinListRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? BulletinListRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseBulletinListRequestBody(): BulletinListRequestBody {
  return { code: 0, language: 0, page: undefined };
}

export const BulletinListRequestBody: MessageFns<BulletinListRequestBody> = {
  encode(message: BulletinListRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.language !== 0) {
      writer.uint32(16).int32(message.language);
    }
    if (message.page !== undefined) {
      RequestPage.encode(message.page, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BulletinListRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulletinListRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.language = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.page = RequestPage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulletinListRequestBody {
    return {
      code: isSet(object.code) ? bulletinCodeEnumFromJSON(object.code) : 0,
      language: isSet(object.language) ? languageCodeEnumFromJSON(object.language) : 0,
      page: isSet(object.page) ? RequestPage.fromJSON(object.page) : undefined,
    };
  },

  toJSON(message: BulletinListRequestBody): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = bulletinCodeEnumToJSON(message.code);
    }
    if (message.language !== 0) {
      obj.language = languageCodeEnumToJSON(message.language);
    }
    if (message.page !== undefined) {
      obj.page = RequestPage.toJSON(message.page);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BulletinListRequestBody>, I>>(base?: I): BulletinListRequestBody {
    return BulletinListRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulletinListRequestBody>, I>>(object: I): BulletinListRequestBody {
    const message = createBaseBulletinListRequestBody();
    message.code = object.code ?? 0;
    message.language = object.language ?? 0;
    message.page = (object.page !== undefined && object.page !== null)
      ? RequestPage.fromPartial(object.page)
      : undefined;
    return message;
  },
};

function createBaseBulletinListResponse(): BulletinListResponse {
  return { header: undefined, body: undefined };
}

export const BulletinListResponse: MessageFns<BulletinListResponse> = {
  encode(message: BulletinListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      BulletinListResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BulletinListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulletinListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = BulletinListResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulletinListResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? BulletinListResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: BulletinListResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = BulletinListResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BulletinListResponse>, I>>(base?: I): BulletinListResponse {
    return BulletinListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulletinListResponse>, I>>(object: I): BulletinListResponse {
    const message = createBaseBulletinListResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? BulletinListResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseBulletinListResponseBody(): BulletinListResponseBody {
  return { status: undefined, solutions: [], page: undefined };
}

export const BulletinListResponseBody: MessageFns<BulletinListResponseBody> = {
  encode(message: BulletinListResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    for (const v of message.solutions) {
      SolutionMetadata.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.page !== undefined) {
      ResponsePage.encode(message.page, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BulletinListResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulletinListResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.solutions.push(SolutionMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.page = ResponsePage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BulletinListResponseBody {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      solutions: globalThis.Array.isArray(object?.solutions)
        ? object.solutions.map((e: any) => SolutionMetadata.fromJSON(e))
        : [],
      page: isSet(object.page) ? ResponsePage.fromJSON(object.page) : undefined,
    };
  },

  toJSON(message: BulletinListResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.solutions?.length) {
      obj.solutions = message.solutions.map((e) => SolutionMetadata.toJSON(e));
    }
    if (message.page !== undefined) {
      obj.page = ResponsePage.toJSON(message.page);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BulletinListResponseBody>, I>>(base?: I): BulletinListResponseBody {
    return BulletinListResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BulletinListResponseBody>, I>>(object: I): BulletinListResponseBody {
    const message = createBaseBulletinListResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.solutions = object.solutions?.map((e) => SolutionMetadata.fromPartial(e)) || [];
    message.page = (object.page !== undefined && object.page !== null)
      ? ResponsePage.fromPartial(object.page)
      : undefined;
    return message;
  },
};

function createBaseSolutionMetadata(): SolutionMetadata {
  return { publisher: "", language: 0, uid: "", name: "", description: "", createdAt: "", cards: [], signature: "" };
}

export const SolutionMetadata: MessageFns<SolutionMetadata> = {
  encode(message: SolutionMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publisher !== "") {
      writer.uint32(10).string(message.publisher);
    }
    if (message.language !== 0) {
      writer.uint32(16).int32(message.language);
    }
    if (message.uid !== "") {
      writer.uint32(26).string(message.uid);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.createdAt !== "") {
      writer.uint32(50).string(message.createdAt);
    }
    for (const v of message.cards) {
      SolutionCard.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.signature !== "") {
      writer.uint32(66).string(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SolutionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSolutionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publisher = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.language = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.uid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.cards.push(SolutionCard.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SolutionMetadata {
    return {
      publisher: isSet(object.publisher) ? globalThis.String(object.publisher) : "",
      language: isSet(object.language) ? languageCodeEnumFromJSON(object.language) : 0,
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      cards: globalThis.Array.isArray(object?.cards) ? object.cards.map((e: any) => SolutionCard.fromJSON(e)) : [],
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
    };
  },

  toJSON(message: SolutionMetadata): unknown {
    const obj: any = {};
    if (message.publisher !== "") {
      obj.publisher = message.publisher;
    }
    if (message.language !== 0) {
      obj.language = languageCodeEnumToJSON(message.language);
    }
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.cards?.length) {
      obj.cards = message.cards.map((e) => SolutionCard.toJSON(e));
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SolutionMetadata>, I>>(base?: I): SolutionMetadata {
    return SolutionMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SolutionMetadata>, I>>(object: I): SolutionMetadata {
    const message = createBaseSolutionMetadata();
    message.publisher = object.publisher ?? "";
    message.language = object.language ?? 0;
    message.uid = object.uid ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.createdAt = object.createdAt ?? "";
    message.cards = object.cards?.map((e) => SolutionCard.fromPartial(e)) || [];
    message.signature = object.signature ?? "";
    return message;
  },
};

function createBaseSolutionCard(): SolutionCard {
  return { name: "", price: "", variables: "" };
}

export const SolutionCard: MessageFns<SolutionCard> = {
  encode(message: SolutionCard, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.price !== "") {
      writer.uint32(18).string(message.price);
    }
    if (message.variables !== "") {
      writer.uint32(26).string(message.variables);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SolutionCard {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSolutionCard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.price = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.variables = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SolutionCard {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      price: isSet(object.price) ? globalThis.String(object.price) : "",
      variables: isSet(object.variables) ? globalThis.String(object.variables) : "",
    };
  },

  toJSON(message: SolutionCard): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.price !== "") {
      obj.price = message.price;
    }
    if (message.variables !== "") {
      obj.variables = message.variables;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SolutionCard>, I>>(base?: I): SolutionCard {
    return SolutionCard.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SolutionCard>, I>>(object: I): SolutionCard {
    const message = createBaseSolutionCard();
    message.name = object.name ?? "";
    message.price = object.price ?? "";
    message.variables = object.variables ?? "";
    return message;
  },
};

export type BulletinService = typeof BulletinService;
export const BulletinService = {
  list: {
    path: "/yeying.api.bulletin.Bulletin/List",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: BulletinListRequest) => Buffer.from(BulletinListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => BulletinListRequest.decode(value),
    responseSerialize: (value: BulletinListResponse) => Buffer.from(BulletinListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => BulletinListResponse.decode(value),
  },
} as const;

export interface BulletinServer extends UntypedServiceImplementation {
  list: handleUnaryCall<BulletinListRequest, BulletinListResponse>;
}

export interface BulletinClient extends Client {
  list(
    request: BulletinListRequest,
    callback: (error: ServiceError | null, response: BulletinListResponse) => void,
  ): ClientUnaryCall;
  list(
    request: BulletinListRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: BulletinListResponse) => void,
  ): ClientUnaryCall;
  list(
    request: BulletinListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: BulletinListResponse) => void,
  ): ClientUnaryCall;
}

export const BulletinClient = makeGenericClientConstructor(
  BulletinService,
  "yeying.api.bulletin.Bulletin",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): BulletinClient;
  service: typeof BulletinService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
