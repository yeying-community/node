// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: yeying/api/invitation/invitation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { MessageHeader, RequestPage, ResponsePage, ResponseStatus } from "../common/message";

export const protobufPackage = "yeying.api.invitation";

export enum InvitationSceneEnum {
  /** INVITATION_SCENE_UNKNOWN - 未知编码，是一种占位符 */
  INVITATION_SCENE_UNKNOWN = 0,
  /** INVITATION_SCENE_USER - 用户邀请码，成为某个服务的用户，用于不完全开放的服务，只允许受邀使用该服务 */
  INVITATION_SCENE_USER = 1,
  UNRECOGNIZED = -1,
}

export function invitationSceneEnumFromJSON(object: any): InvitationSceneEnum {
  switch (object) {
    case 0:
    case "INVITATION_SCENE_UNKNOWN":
      return InvitationSceneEnum.INVITATION_SCENE_UNKNOWN;
    case 1:
    case "INVITATION_SCENE_USER":
      return InvitationSceneEnum.INVITATION_SCENE_USER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InvitationSceneEnum.UNRECOGNIZED;
  }
}

export function invitationSceneEnumToJSON(object: InvitationSceneEnum): string {
  switch (object) {
    case InvitationSceneEnum.INVITATION_SCENE_UNKNOWN:
      return "INVITATION_SCENE_UNKNOWN";
    case InvitationSceneEnum.INVITATION_SCENE_USER:
      return "INVITATION_SCENE_USER";
    case InvitationSceneEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface InvitationMetadata {
  /** 使用场景 */
  scene: InvitationSceneEnum;
  /** 邀请码 */
  code: string;
  /** 创建时间 */
  createdAt: string;
  /** 有效截止日期 */
  expiredAt: string;
  /** 邀请者身份ID */
  inviter: string;
  /** 受邀者身份ID，可以不填，表示邀请码可以给任何身份使用 */
  invitee: string;
  /** 邀请者签名 */
  signature: string;
}

/** 邀请码被使用的状态记录 */
export interface InvitationUseState {
  /** 邀请码 */
  code: string;
  /** 使用时间 */
  usedAt: string;
  /** 使用者身份ID */
  user: string;
  /** 受邀者签名 */
  signature: string;
}

export interface CreateInvitationRequest {
  header: MessageHeader | undefined;
  body: CreateInvitationRequestBody | undefined;
}

export interface CreateInvitationRequestBody {
  invitation: InvitationMetadata | undefined;
}

export interface CreateInvitationResponse {
  header: MessageHeader | undefined;
  body: CreateInvitationResponseBody | undefined;
}

export interface CreateInvitationResponseBody {
  status: ResponseStatus | undefined;
  invitation: InvitationMetadata | undefined;
}

export interface SearchInvitationRequest {
  header: MessageHeader | undefined;
  body: SearchInvitationRequestBody | undefined;
}

export interface SearchInvitationRequestBody {
  page: RequestPage | undefined;
}

export interface SearchInvitationResponse {
  header: MessageHeader | undefined;
  body: SearchInvitationResponseBody | undefined;
}

export interface SearchInvitationResponseBody {
  status: ResponseStatus | undefined;
  invitations: InvitationMetadata[];
  page: ResponsePage | undefined;
}

export interface InvitationDetailRequest {
  header: MessageHeader | undefined;
  body: InvitationDetailRequestBody | undefined;
}

export interface InvitationDetailRequestBody {
  code: string;
}

export interface InvitationDetailResponse {
  header: MessageHeader | undefined;
  body: InvitationDetailResponseBody | undefined;
}

export interface InvitationDetailResponseBody {
  status: ResponseStatus | undefined;
  invitation: InvitationMetadata | undefined;
  state: InvitationUseState | undefined;
}

function createBaseInvitationMetadata(): InvitationMetadata {
  return { scene: 0, code: "", createdAt: "", expiredAt: "", inviter: "", invitee: "", signature: "" };
}

export const InvitationMetadata: MessageFns<InvitationMetadata> = {
  encode(message: InvitationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scene !== 0) {
      writer.uint32(8).int32(message.scene);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    if (message.createdAt !== "") {
      writer.uint32(26).string(message.createdAt);
    }
    if (message.expiredAt !== "") {
      writer.uint32(34).string(message.expiredAt);
    }
    if (message.inviter !== "") {
      writer.uint32(42).string(message.inviter);
    }
    if (message.invitee !== "") {
      writer.uint32(50).string(message.invitee);
    }
    if (message.signature !== "") {
      writer.uint32(58).string(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvitationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvitationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.scene = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.expiredAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.inviter = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.invitee = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvitationMetadata {
    return {
      scene: isSet(object.scene) ? invitationSceneEnumFromJSON(object.scene) : 0,
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      expiredAt: isSet(object.expiredAt) ? globalThis.String(object.expiredAt) : "",
      inviter: isSet(object.inviter) ? globalThis.String(object.inviter) : "",
      invitee: isSet(object.invitee) ? globalThis.String(object.invitee) : "",
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
    };
  },

  toJSON(message: InvitationMetadata): unknown {
    const obj: any = {};
    if (message.scene !== 0) {
      obj.scene = invitationSceneEnumToJSON(message.scene);
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.expiredAt !== "") {
      obj.expiredAt = message.expiredAt;
    }
    if (message.inviter !== "") {
      obj.inviter = message.inviter;
    }
    if (message.invitee !== "") {
      obj.invitee = message.invitee;
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InvitationMetadata>, I>>(base?: I): InvitationMetadata {
    return InvitationMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InvitationMetadata>, I>>(object: I): InvitationMetadata {
    const message = createBaseInvitationMetadata();
    message.scene = object.scene ?? 0;
    message.code = object.code ?? "";
    message.createdAt = object.createdAt ?? "";
    message.expiredAt = object.expiredAt ?? "";
    message.inviter = object.inviter ?? "";
    message.invitee = object.invitee ?? "";
    message.signature = object.signature ?? "";
    return message;
  },
};

function createBaseInvitationUseState(): InvitationUseState {
  return { code: "", usedAt: "", user: "", signature: "" };
}

export const InvitationUseState: MessageFns<InvitationUseState> = {
  encode(message: InvitationUseState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    if (message.usedAt !== "") {
      writer.uint32(18).string(message.usedAt);
    }
    if (message.user !== "") {
      writer.uint32(26).string(message.user);
    }
    if (message.signature !== "") {
      writer.uint32(34).string(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvitationUseState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvitationUseState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.usedAt = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.user = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvitationUseState {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      usedAt: isSet(object.usedAt) ? globalThis.String(object.usedAt) : "",
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
    };
  },

  toJSON(message: InvitationUseState): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.usedAt !== "") {
      obj.usedAt = message.usedAt;
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InvitationUseState>, I>>(base?: I): InvitationUseState {
    return InvitationUseState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InvitationUseState>, I>>(object: I): InvitationUseState {
    const message = createBaseInvitationUseState();
    message.code = object.code ?? "";
    message.usedAt = object.usedAt ?? "";
    message.user = object.user ?? "";
    message.signature = object.signature ?? "";
    return message;
  },
};

function createBaseCreateInvitationRequest(): CreateInvitationRequest {
  return { header: undefined, body: undefined };
}

export const CreateInvitationRequest: MessageFns<CreateInvitationRequest> = {
  encode(message: CreateInvitationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      CreateInvitationRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateInvitationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateInvitationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = CreateInvitationRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateInvitationRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? CreateInvitationRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: CreateInvitationRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = CreateInvitationRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateInvitationRequest>, I>>(base?: I): CreateInvitationRequest {
    return CreateInvitationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateInvitationRequest>, I>>(object: I): CreateInvitationRequest {
    const message = createBaseCreateInvitationRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? CreateInvitationRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseCreateInvitationRequestBody(): CreateInvitationRequestBody {
  return { invitation: undefined };
}

export const CreateInvitationRequestBody: MessageFns<CreateInvitationRequestBody> = {
  encode(message: CreateInvitationRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.invitation !== undefined) {
      InvitationMetadata.encode(message.invitation, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateInvitationRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateInvitationRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.invitation = InvitationMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateInvitationRequestBody {
    return { invitation: isSet(object.invitation) ? InvitationMetadata.fromJSON(object.invitation) : undefined };
  },

  toJSON(message: CreateInvitationRequestBody): unknown {
    const obj: any = {};
    if (message.invitation !== undefined) {
      obj.invitation = InvitationMetadata.toJSON(message.invitation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateInvitationRequestBody>, I>>(base?: I): CreateInvitationRequestBody {
    return CreateInvitationRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateInvitationRequestBody>, I>>(object: I): CreateInvitationRequestBody {
    const message = createBaseCreateInvitationRequestBody();
    message.invitation = (object.invitation !== undefined && object.invitation !== null)
      ? InvitationMetadata.fromPartial(object.invitation)
      : undefined;
    return message;
  },
};

function createBaseCreateInvitationResponse(): CreateInvitationResponse {
  return { header: undefined, body: undefined };
}

export const CreateInvitationResponse: MessageFns<CreateInvitationResponse> = {
  encode(message: CreateInvitationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      CreateInvitationResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateInvitationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateInvitationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = CreateInvitationResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateInvitationResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? CreateInvitationResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: CreateInvitationResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = CreateInvitationResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateInvitationResponse>, I>>(base?: I): CreateInvitationResponse {
    return CreateInvitationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateInvitationResponse>, I>>(object: I): CreateInvitationResponse {
    const message = createBaseCreateInvitationResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? CreateInvitationResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseCreateInvitationResponseBody(): CreateInvitationResponseBody {
  return { status: undefined, invitation: undefined };
}

export const CreateInvitationResponseBody: MessageFns<CreateInvitationResponseBody> = {
  encode(message: CreateInvitationResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.invitation !== undefined) {
      InvitationMetadata.encode(message.invitation, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateInvitationResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateInvitationResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.invitation = InvitationMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateInvitationResponseBody {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      invitation: isSet(object.invitation) ? InvitationMetadata.fromJSON(object.invitation) : undefined,
    };
  },

  toJSON(message: CreateInvitationResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.invitation !== undefined) {
      obj.invitation = InvitationMetadata.toJSON(message.invitation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateInvitationResponseBody>, I>>(base?: I): CreateInvitationResponseBody {
    return CreateInvitationResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateInvitationResponseBody>, I>>(object: I): CreateInvitationResponseBody {
    const message = createBaseCreateInvitationResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.invitation = (object.invitation !== undefined && object.invitation !== null)
      ? InvitationMetadata.fromPartial(object.invitation)
      : undefined;
    return message;
  },
};

function createBaseSearchInvitationRequest(): SearchInvitationRequest {
  return { header: undefined, body: undefined };
}

export const SearchInvitationRequest: MessageFns<SearchInvitationRequest> = {
  encode(message: SearchInvitationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      SearchInvitationRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchInvitationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchInvitationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = SearchInvitationRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchInvitationRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? SearchInvitationRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SearchInvitationRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = SearchInvitationRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchInvitationRequest>, I>>(base?: I): SearchInvitationRequest {
    return SearchInvitationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchInvitationRequest>, I>>(object: I): SearchInvitationRequest {
    const message = createBaseSearchInvitationRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? SearchInvitationRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSearchInvitationRequestBody(): SearchInvitationRequestBody {
  return { page: undefined };
}

export const SearchInvitationRequestBody: MessageFns<SearchInvitationRequestBody> = {
  encode(message: SearchInvitationRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== undefined) {
      RequestPage.encode(message.page, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchInvitationRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchInvitationRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.page = RequestPage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchInvitationRequestBody {
    return { page: isSet(object.page) ? RequestPage.fromJSON(object.page) : undefined };
  },

  toJSON(message: SearchInvitationRequestBody): unknown {
    const obj: any = {};
    if (message.page !== undefined) {
      obj.page = RequestPage.toJSON(message.page);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchInvitationRequestBody>, I>>(base?: I): SearchInvitationRequestBody {
    return SearchInvitationRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchInvitationRequestBody>, I>>(object: I): SearchInvitationRequestBody {
    const message = createBaseSearchInvitationRequestBody();
    message.page = (object.page !== undefined && object.page !== null)
      ? RequestPage.fromPartial(object.page)
      : undefined;
    return message;
  },
};

function createBaseSearchInvitationResponse(): SearchInvitationResponse {
  return { header: undefined, body: undefined };
}

export const SearchInvitationResponse: MessageFns<SearchInvitationResponse> = {
  encode(message: SearchInvitationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      SearchInvitationResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchInvitationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchInvitationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = SearchInvitationResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchInvitationResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? SearchInvitationResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SearchInvitationResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = SearchInvitationResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchInvitationResponse>, I>>(base?: I): SearchInvitationResponse {
    return SearchInvitationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchInvitationResponse>, I>>(object: I): SearchInvitationResponse {
    const message = createBaseSearchInvitationResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? SearchInvitationResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSearchInvitationResponseBody(): SearchInvitationResponseBody {
  return { status: undefined, invitations: [], page: undefined };
}

export const SearchInvitationResponseBody: MessageFns<SearchInvitationResponseBody> = {
  encode(message: SearchInvitationResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    for (const v of message.invitations) {
      InvitationMetadata.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.page !== undefined) {
      ResponsePage.encode(message.page, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchInvitationResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchInvitationResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.invitations.push(InvitationMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.page = ResponsePage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchInvitationResponseBody {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      invitations: globalThis.Array.isArray(object?.invitations)
        ? object.invitations.map((e: any) => InvitationMetadata.fromJSON(e))
        : [],
      page: isSet(object.page) ? ResponsePage.fromJSON(object.page) : undefined,
    };
  },

  toJSON(message: SearchInvitationResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.invitations?.length) {
      obj.invitations = message.invitations.map((e) => InvitationMetadata.toJSON(e));
    }
    if (message.page !== undefined) {
      obj.page = ResponsePage.toJSON(message.page);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchInvitationResponseBody>, I>>(base?: I): SearchInvitationResponseBody {
    return SearchInvitationResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchInvitationResponseBody>, I>>(object: I): SearchInvitationResponseBody {
    const message = createBaseSearchInvitationResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.invitations = object.invitations?.map((e) => InvitationMetadata.fromPartial(e)) || [];
    message.page = (object.page !== undefined && object.page !== null)
      ? ResponsePage.fromPartial(object.page)
      : undefined;
    return message;
  },
};

function createBaseInvitationDetailRequest(): InvitationDetailRequest {
  return { header: undefined, body: undefined };
}

export const InvitationDetailRequest: MessageFns<InvitationDetailRequest> = {
  encode(message: InvitationDetailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      InvitationDetailRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvitationDetailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvitationDetailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = InvitationDetailRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvitationDetailRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? InvitationDetailRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: InvitationDetailRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = InvitationDetailRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InvitationDetailRequest>, I>>(base?: I): InvitationDetailRequest {
    return InvitationDetailRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InvitationDetailRequest>, I>>(object: I): InvitationDetailRequest {
    const message = createBaseInvitationDetailRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? InvitationDetailRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseInvitationDetailRequestBody(): InvitationDetailRequestBody {
  return { code: "" };
}

export const InvitationDetailRequestBody: MessageFns<InvitationDetailRequestBody> = {
  encode(message: InvitationDetailRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvitationDetailRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvitationDetailRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvitationDetailRequestBody {
    return { code: isSet(object.code) ? globalThis.String(object.code) : "" };
  },

  toJSON(message: InvitationDetailRequestBody): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InvitationDetailRequestBody>, I>>(base?: I): InvitationDetailRequestBody {
    return InvitationDetailRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InvitationDetailRequestBody>, I>>(object: I): InvitationDetailRequestBody {
    const message = createBaseInvitationDetailRequestBody();
    message.code = object.code ?? "";
    return message;
  },
};

function createBaseInvitationDetailResponse(): InvitationDetailResponse {
  return { header: undefined, body: undefined };
}

export const InvitationDetailResponse: MessageFns<InvitationDetailResponse> = {
  encode(message: InvitationDetailResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      InvitationDetailResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvitationDetailResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvitationDetailResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = InvitationDetailResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvitationDetailResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? InvitationDetailResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: InvitationDetailResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = InvitationDetailResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InvitationDetailResponse>, I>>(base?: I): InvitationDetailResponse {
    return InvitationDetailResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InvitationDetailResponse>, I>>(object: I): InvitationDetailResponse {
    const message = createBaseInvitationDetailResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? InvitationDetailResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseInvitationDetailResponseBody(): InvitationDetailResponseBody {
  return { status: undefined, invitation: undefined, state: undefined };
}

export const InvitationDetailResponseBody: MessageFns<InvitationDetailResponseBody> = {
  encode(message: InvitationDetailResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.invitation !== undefined) {
      InvitationMetadata.encode(message.invitation, writer.uint32(18).fork()).join();
    }
    if (message.state !== undefined) {
      InvitationUseState.encode(message.state, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvitationDetailResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvitationDetailResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.invitation = InvitationMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.state = InvitationUseState.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvitationDetailResponseBody {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      invitation: isSet(object.invitation) ? InvitationMetadata.fromJSON(object.invitation) : undefined,
      state: isSet(object.state) ? InvitationUseState.fromJSON(object.state) : undefined,
    };
  },

  toJSON(message: InvitationDetailResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.invitation !== undefined) {
      obj.invitation = InvitationMetadata.toJSON(message.invitation);
    }
    if (message.state !== undefined) {
      obj.state = InvitationUseState.toJSON(message.state);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InvitationDetailResponseBody>, I>>(base?: I): InvitationDetailResponseBody {
    return InvitationDetailResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InvitationDetailResponseBody>, I>>(object: I): InvitationDetailResponseBody {
    const message = createBaseInvitationDetailResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.invitation = (object.invitation !== undefined && object.invitation !== null)
      ? InvitationMetadata.fromPartial(object.invitation)
      : undefined;
    message.state = (object.state !== undefined && object.state !== null)
      ? InvitationUseState.fromPartial(object.state)
      : undefined;
    return message;
  },
};

export type InvitationService = typeof InvitationService;
export const InvitationService = {
  /** 创建邀请码，通常是服务所有者才有权限创建 */
  create: {
    path: "/yeying.api.invitation.Invitation/Create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateInvitationRequest) => Buffer.from(CreateInvitationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateInvitationRequest.decode(value),
    responseSerialize: (value: CreateInvitationResponse) =>
      Buffer.from(CreateInvitationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateInvitationResponse.decode(value),
  },
  /** 搜索邀请码 */
  search: {
    path: "/yeying.api.invitation.Invitation/Search",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SearchInvitationRequest) => Buffer.from(SearchInvitationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SearchInvitationRequest.decode(value),
    responseSerialize: (value: SearchInvitationResponse) =>
      Buffer.from(SearchInvitationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SearchInvitationResponse.decode(value),
  },
  /** 查询邀请码详情 */
  detail: {
    path: "/yeying.api.invitation.Invitation/Detail",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: InvitationDetailRequest) => Buffer.from(InvitationDetailRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => InvitationDetailRequest.decode(value),
    responseSerialize: (value: InvitationDetailResponse) =>
      Buffer.from(InvitationDetailResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => InvitationDetailResponse.decode(value),
  },
} as const;

export interface InvitationServer extends UntypedServiceImplementation {
  /** 创建邀请码，通常是服务所有者才有权限创建 */
  create: handleUnaryCall<CreateInvitationRequest, CreateInvitationResponse>;
  /** 搜索邀请码 */
  search: handleUnaryCall<SearchInvitationRequest, SearchInvitationResponse>;
  /** 查询邀请码详情 */
  detail: handleUnaryCall<InvitationDetailRequest, InvitationDetailResponse>;
}

export interface InvitationClient extends Client {
  /** 创建邀请码，通常是服务所有者才有权限创建 */
  create(
    request: CreateInvitationRequest,
    callback: (error: ServiceError | null, response: CreateInvitationResponse) => void,
  ): ClientUnaryCall;
  create(
    request: CreateInvitationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateInvitationResponse) => void,
  ): ClientUnaryCall;
  create(
    request: CreateInvitationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateInvitationResponse) => void,
  ): ClientUnaryCall;
  /** 搜索邀请码 */
  search(
    request: SearchInvitationRequest,
    callback: (error: ServiceError | null, response: SearchInvitationResponse) => void,
  ): ClientUnaryCall;
  search(
    request: SearchInvitationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SearchInvitationResponse) => void,
  ): ClientUnaryCall;
  search(
    request: SearchInvitationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SearchInvitationResponse) => void,
  ): ClientUnaryCall;
  /** 查询邀请码详情 */
  detail(
    request: InvitationDetailRequest,
    callback: (error: ServiceError | null, response: InvitationDetailResponse) => void,
  ): ClientUnaryCall;
  detail(
    request: InvitationDetailRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: InvitationDetailResponse) => void,
  ): ClientUnaryCall;
  detail(
    request: InvitationDetailRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: InvitationDetailResponse) => void,
  ): ClientUnaryCall;
}

export const InvitationClient = makeGenericClientConstructor(
  InvitationService,
  "yeying.api.invitation.Invitation",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): InvitationClient;
  service: typeof InvitationService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
