// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: yeying/api/application/application.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import {
  ApplicationCodeEnum,
  applicationCodeEnumFromJSON,
  applicationCodeEnumToJSON,
  ApplicationStatusEnum,
  applicationStatusEnumFromJSON,
  applicationStatusEnumToJSON,
} from "../common/code";
import { MessageHeader, RequestPage, ResponsePage, ResponseStatus } from "../common/message";
import { ApplicationMetadata } from "../common/model";

export const protobufPackage = "yeying.api.application";

export interface SearchApplicationRequest {
  header: MessageHeader | undefined;
  body: SearchApplicationRequestBody | undefined;
}

export interface SearchApplicationRequestBody {
  condition: SearchApplicationCondition | undefined;
  page: RequestPage | undefined;
}

export interface SearchApplicationCondition {
  /** 应用类型【参数可选】 */
  code: ApplicationCodeEnum;
  /** 应用状态【参数可选】 */
  status: ApplicationStatusEnum;
  /** 应用所有者【参数可选】 */
  owner: string;
  /** 应用名称【参数可选】 */
  name: string;
  /** 输入[应用所有者、应用名称]关键字搜索【参数可选】 */
  keyword: string;
}

export interface SearchApplicationResponse {
  header: MessageHeader | undefined;
  body: SearchApplicationResponseBody | undefined;
}

export interface SearchApplicationResponseBody {
  status: ResponseStatus | undefined;
  applications: ApplicationMetadata[];
  page: ResponsePage | undefined;
}

export interface CreateApplicationRequest {
  header: MessageHeader | undefined;
  body: CreateApplicationRequestBody | undefined;
}

export interface CreateApplicationRequestBody {
  application: ApplicationMetadata | undefined;
}

export interface CreateApplicationResponse {
  header: MessageHeader | undefined;
  body: CreateApplicationResponseBody | undefined;
}

export interface CreateApplicationResponseBody {
  status: ResponseStatus | undefined;
  application: ApplicationMetadata | undefined;
}

export interface ApplicationDetailRequest {
  header: MessageHeader | undefined;
  body: ApplicationDetailRequestBody | undefined;
}

export interface ApplicationDetailRequestBody {
  did: string;
  version: number;
}

export interface ApplicationDetailResponse {
  header: MessageHeader | undefined;
  body: ApplicationDetailResponseBody | undefined;
}

export interface ApplicationDetailResponseBody {
  status: ResponseStatus | undefined;
  application: ApplicationMetadata | undefined;
}

export interface DeleteApplicationRequest {
  header: MessageHeader | undefined;
  body: DeleteApplicationRequestBody | undefined;
}

export interface DeleteApplicationRequestBody {
  did: string;
  version: number;
}

export interface DeleteApplicationResponse {
  header: MessageHeader | undefined;
  body: DeleteApplicationResponseBody | undefined;
}

export interface DeleteApplicationResponseBody {
  status: ResponseStatus | undefined;
}

function createBaseSearchApplicationRequest(): SearchApplicationRequest {
  return { header: undefined, body: undefined };
}

export const SearchApplicationRequest: MessageFns<SearchApplicationRequest> = {
  encode(message: SearchApplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      SearchApplicationRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchApplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchApplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = SearchApplicationRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchApplicationRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? SearchApplicationRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SearchApplicationRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = SearchApplicationRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchApplicationRequest>, I>>(base?: I): SearchApplicationRequest {
    return SearchApplicationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchApplicationRequest>, I>>(object: I): SearchApplicationRequest {
    const message = createBaseSearchApplicationRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? SearchApplicationRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSearchApplicationRequestBody(): SearchApplicationRequestBody {
  return { condition: undefined, page: undefined };
}

export const SearchApplicationRequestBody: MessageFns<SearchApplicationRequestBody> = {
  encode(message: SearchApplicationRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.condition !== undefined) {
      SearchApplicationCondition.encode(message.condition, writer.uint32(10).fork()).join();
    }
    if (message.page !== undefined) {
      RequestPage.encode(message.page, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchApplicationRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchApplicationRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.condition = SearchApplicationCondition.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.page = RequestPage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchApplicationRequestBody {
    return {
      condition: isSet(object.condition) ? SearchApplicationCondition.fromJSON(object.condition) : undefined,
      page: isSet(object.page) ? RequestPage.fromJSON(object.page) : undefined,
    };
  },

  toJSON(message: SearchApplicationRequestBody): unknown {
    const obj: any = {};
    if (message.condition !== undefined) {
      obj.condition = SearchApplicationCondition.toJSON(message.condition);
    }
    if (message.page !== undefined) {
      obj.page = RequestPage.toJSON(message.page);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchApplicationRequestBody>, I>>(base?: I): SearchApplicationRequestBody {
    return SearchApplicationRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchApplicationRequestBody>, I>>(object: I): SearchApplicationRequestBody {
    const message = createBaseSearchApplicationRequestBody();
    message.condition = (object.condition !== undefined && object.condition !== null)
      ? SearchApplicationCondition.fromPartial(object.condition)
      : undefined;
    message.page = (object.page !== undefined && object.page !== null)
      ? RequestPage.fromPartial(object.page)
      : undefined;
    return message;
  },
};

function createBaseSearchApplicationCondition(): SearchApplicationCondition {
  return { code: 0, status: 0, owner: "", name: "", keyword: "" };
}

export const SearchApplicationCondition: MessageFns<SearchApplicationCondition> = {
  encode(message: SearchApplicationCondition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.keyword !== "") {
      writer.uint32(42).string(message.keyword);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchApplicationCondition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchApplicationCondition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.keyword = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchApplicationCondition {
    return {
      code: isSet(object.code) ? applicationCodeEnumFromJSON(object.code) : 0,
      status: isSet(object.status) ? applicationStatusEnumFromJSON(object.status) : 0,
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      keyword: isSet(object.keyword) ? globalThis.String(object.keyword) : "",
    };
  },

  toJSON(message: SearchApplicationCondition): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = applicationCodeEnumToJSON(message.code);
    }
    if (message.status !== 0) {
      obj.status = applicationStatusEnumToJSON(message.status);
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.keyword !== "") {
      obj.keyword = message.keyword;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchApplicationCondition>, I>>(base?: I): SearchApplicationCondition {
    return SearchApplicationCondition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchApplicationCondition>, I>>(object: I): SearchApplicationCondition {
    const message = createBaseSearchApplicationCondition();
    message.code = object.code ?? 0;
    message.status = object.status ?? 0;
    message.owner = object.owner ?? "";
    message.name = object.name ?? "";
    message.keyword = object.keyword ?? "";
    return message;
  },
};

function createBaseSearchApplicationResponse(): SearchApplicationResponse {
  return { header: undefined, body: undefined };
}

export const SearchApplicationResponse: MessageFns<SearchApplicationResponse> = {
  encode(message: SearchApplicationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      SearchApplicationResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchApplicationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchApplicationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = SearchApplicationResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchApplicationResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? SearchApplicationResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: SearchApplicationResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = SearchApplicationResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchApplicationResponse>, I>>(base?: I): SearchApplicationResponse {
    return SearchApplicationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchApplicationResponse>, I>>(object: I): SearchApplicationResponse {
    const message = createBaseSearchApplicationResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? SearchApplicationResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseSearchApplicationResponseBody(): SearchApplicationResponseBody {
  return { status: undefined, applications: [], page: undefined };
}

export const SearchApplicationResponseBody: MessageFns<SearchApplicationResponseBody> = {
  encode(message: SearchApplicationResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    for (const v of message.applications) {
      ApplicationMetadata.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.page !== undefined) {
      ResponsePage.encode(message.page, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchApplicationResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchApplicationResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.applications.push(ApplicationMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.page = ResponsePage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchApplicationResponseBody {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      applications: globalThis.Array.isArray(object?.applications)
        ? object.applications.map((e: any) => ApplicationMetadata.fromJSON(e))
        : [],
      page: isSet(object.page) ? ResponsePage.fromJSON(object.page) : undefined,
    };
  },

  toJSON(message: SearchApplicationResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.applications?.length) {
      obj.applications = message.applications.map((e) => ApplicationMetadata.toJSON(e));
    }
    if (message.page !== undefined) {
      obj.page = ResponsePage.toJSON(message.page);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchApplicationResponseBody>, I>>(base?: I): SearchApplicationResponseBody {
    return SearchApplicationResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchApplicationResponseBody>, I>>(
    object: I,
  ): SearchApplicationResponseBody {
    const message = createBaseSearchApplicationResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.applications = object.applications?.map((e) => ApplicationMetadata.fromPartial(e)) || [];
    message.page = (object.page !== undefined && object.page !== null)
      ? ResponsePage.fromPartial(object.page)
      : undefined;
    return message;
  },
};

function createBaseCreateApplicationRequest(): CreateApplicationRequest {
  return { header: undefined, body: undefined };
}

export const CreateApplicationRequest: MessageFns<CreateApplicationRequest> = {
  encode(message: CreateApplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      CreateApplicationRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateApplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateApplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = CreateApplicationRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateApplicationRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? CreateApplicationRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: CreateApplicationRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = CreateApplicationRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateApplicationRequest>, I>>(base?: I): CreateApplicationRequest {
    return CreateApplicationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateApplicationRequest>, I>>(object: I): CreateApplicationRequest {
    const message = createBaseCreateApplicationRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? CreateApplicationRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseCreateApplicationRequestBody(): CreateApplicationRequestBody {
  return { application: undefined };
}

export const CreateApplicationRequestBody: MessageFns<CreateApplicationRequestBody> = {
  encode(message: CreateApplicationRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.application !== undefined) {
      ApplicationMetadata.encode(message.application, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateApplicationRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateApplicationRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.application = ApplicationMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateApplicationRequestBody {
    return { application: isSet(object.application) ? ApplicationMetadata.fromJSON(object.application) : undefined };
  },

  toJSON(message: CreateApplicationRequestBody): unknown {
    const obj: any = {};
    if (message.application !== undefined) {
      obj.application = ApplicationMetadata.toJSON(message.application);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateApplicationRequestBody>, I>>(base?: I): CreateApplicationRequestBody {
    return CreateApplicationRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateApplicationRequestBody>, I>>(object: I): CreateApplicationRequestBody {
    const message = createBaseCreateApplicationRequestBody();
    message.application = (object.application !== undefined && object.application !== null)
      ? ApplicationMetadata.fromPartial(object.application)
      : undefined;
    return message;
  },
};

function createBaseCreateApplicationResponse(): CreateApplicationResponse {
  return { header: undefined, body: undefined };
}

export const CreateApplicationResponse: MessageFns<CreateApplicationResponse> = {
  encode(message: CreateApplicationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      CreateApplicationResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateApplicationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateApplicationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = CreateApplicationResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateApplicationResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? CreateApplicationResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: CreateApplicationResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = CreateApplicationResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateApplicationResponse>, I>>(base?: I): CreateApplicationResponse {
    return CreateApplicationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateApplicationResponse>, I>>(object: I): CreateApplicationResponse {
    const message = createBaseCreateApplicationResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? CreateApplicationResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseCreateApplicationResponseBody(): CreateApplicationResponseBody {
  return { status: undefined, application: undefined };
}

export const CreateApplicationResponseBody: MessageFns<CreateApplicationResponseBody> = {
  encode(message: CreateApplicationResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.application !== undefined) {
      ApplicationMetadata.encode(message.application, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateApplicationResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateApplicationResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.application = ApplicationMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateApplicationResponseBody {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      application: isSet(object.application) ? ApplicationMetadata.fromJSON(object.application) : undefined,
    };
  },

  toJSON(message: CreateApplicationResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.application !== undefined) {
      obj.application = ApplicationMetadata.toJSON(message.application);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateApplicationResponseBody>, I>>(base?: I): CreateApplicationResponseBody {
    return CreateApplicationResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateApplicationResponseBody>, I>>(
    object: I,
  ): CreateApplicationResponseBody {
    const message = createBaseCreateApplicationResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.application = (object.application !== undefined && object.application !== null)
      ? ApplicationMetadata.fromPartial(object.application)
      : undefined;
    return message;
  },
};

function createBaseApplicationDetailRequest(): ApplicationDetailRequest {
  return { header: undefined, body: undefined };
}

export const ApplicationDetailRequest: MessageFns<ApplicationDetailRequest> = {
  encode(message: ApplicationDetailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      ApplicationDetailRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplicationDetailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplicationDetailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = ApplicationDetailRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplicationDetailRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? ApplicationDetailRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: ApplicationDetailRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = ApplicationDetailRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApplicationDetailRequest>, I>>(base?: I): ApplicationDetailRequest {
    return ApplicationDetailRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApplicationDetailRequest>, I>>(object: I): ApplicationDetailRequest {
    const message = createBaseApplicationDetailRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? ApplicationDetailRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseApplicationDetailRequestBody(): ApplicationDetailRequestBody {
  return { did: "", version: 0 };
}

export const ApplicationDetailRequestBody: MessageFns<ApplicationDetailRequestBody> = {
  encode(message: ApplicationDetailRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.did !== "") {
      writer.uint32(10).string(message.did);
    }
    if (message.version !== 0) {
      writer.uint32(16).uint32(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplicationDetailRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplicationDetailRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.did = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.version = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplicationDetailRequestBody {
    return {
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
    };
  },

  toJSON(message: ApplicationDetailRequestBody): unknown {
    const obj: any = {};
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApplicationDetailRequestBody>, I>>(base?: I): ApplicationDetailRequestBody {
    return ApplicationDetailRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApplicationDetailRequestBody>, I>>(object: I): ApplicationDetailRequestBody {
    const message = createBaseApplicationDetailRequestBody();
    message.did = object.did ?? "";
    message.version = object.version ?? 0;
    return message;
  },
};

function createBaseApplicationDetailResponse(): ApplicationDetailResponse {
  return { header: undefined, body: undefined };
}

export const ApplicationDetailResponse: MessageFns<ApplicationDetailResponse> = {
  encode(message: ApplicationDetailResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      ApplicationDetailResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplicationDetailResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplicationDetailResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = ApplicationDetailResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplicationDetailResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? ApplicationDetailResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: ApplicationDetailResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = ApplicationDetailResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApplicationDetailResponse>, I>>(base?: I): ApplicationDetailResponse {
    return ApplicationDetailResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApplicationDetailResponse>, I>>(object: I): ApplicationDetailResponse {
    const message = createBaseApplicationDetailResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? ApplicationDetailResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseApplicationDetailResponseBody(): ApplicationDetailResponseBody {
  return { status: undefined, application: undefined };
}

export const ApplicationDetailResponseBody: MessageFns<ApplicationDetailResponseBody> = {
  encode(message: ApplicationDetailResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.application !== undefined) {
      ApplicationMetadata.encode(message.application, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplicationDetailResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplicationDetailResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.application = ApplicationMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplicationDetailResponseBody {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      application: isSet(object.application) ? ApplicationMetadata.fromJSON(object.application) : undefined,
    };
  },

  toJSON(message: ApplicationDetailResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.application !== undefined) {
      obj.application = ApplicationMetadata.toJSON(message.application);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApplicationDetailResponseBody>, I>>(base?: I): ApplicationDetailResponseBody {
    return ApplicationDetailResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApplicationDetailResponseBody>, I>>(
    object: I,
  ): ApplicationDetailResponseBody {
    const message = createBaseApplicationDetailResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.application = (object.application !== undefined && object.application !== null)
      ? ApplicationMetadata.fromPartial(object.application)
      : undefined;
    return message;
  },
};

function createBaseDeleteApplicationRequest(): DeleteApplicationRequest {
  return { header: undefined, body: undefined };
}

export const DeleteApplicationRequest: MessageFns<DeleteApplicationRequest> = {
  encode(message: DeleteApplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      DeleteApplicationRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteApplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteApplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = DeleteApplicationRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteApplicationRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? DeleteApplicationRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: DeleteApplicationRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = DeleteApplicationRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteApplicationRequest>, I>>(base?: I): DeleteApplicationRequest {
    return DeleteApplicationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteApplicationRequest>, I>>(object: I): DeleteApplicationRequest {
    const message = createBaseDeleteApplicationRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? DeleteApplicationRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseDeleteApplicationRequestBody(): DeleteApplicationRequestBody {
  return { did: "", version: 0 };
}

export const DeleteApplicationRequestBody: MessageFns<DeleteApplicationRequestBody> = {
  encode(message: DeleteApplicationRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.did !== "") {
      writer.uint32(10).string(message.did);
    }
    if (message.version !== 0) {
      writer.uint32(16).uint32(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteApplicationRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteApplicationRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.did = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.version = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteApplicationRequestBody {
    return {
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
    };
  },

  toJSON(message: DeleteApplicationRequestBody): unknown {
    const obj: any = {};
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteApplicationRequestBody>, I>>(base?: I): DeleteApplicationRequestBody {
    return DeleteApplicationRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteApplicationRequestBody>, I>>(object: I): DeleteApplicationRequestBody {
    const message = createBaseDeleteApplicationRequestBody();
    message.did = object.did ?? "";
    message.version = object.version ?? 0;
    return message;
  },
};

function createBaseDeleteApplicationResponse(): DeleteApplicationResponse {
  return { header: undefined, body: undefined };
}

export const DeleteApplicationResponse: MessageFns<DeleteApplicationResponse> = {
  encode(message: DeleteApplicationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      DeleteApplicationResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteApplicationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteApplicationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = DeleteApplicationResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteApplicationResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? DeleteApplicationResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: DeleteApplicationResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = DeleteApplicationResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteApplicationResponse>, I>>(base?: I): DeleteApplicationResponse {
    return DeleteApplicationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteApplicationResponse>, I>>(object: I): DeleteApplicationResponse {
    const message = createBaseDeleteApplicationResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? DeleteApplicationResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseDeleteApplicationResponseBody(): DeleteApplicationResponseBody {
  return { status: undefined };
}

export const DeleteApplicationResponseBody: MessageFns<DeleteApplicationResponseBody> = {
  encode(message: DeleteApplicationResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteApplicationResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteApplicationResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteApplicationResponseBody {
    return { status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined };
  },

  toJSON(message: DeleteApplicationResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteApplicationResponseBody>, I>>(base?: I): DeleteApplicationResponseBody {
    return DeleteApplicationResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteApplicationResponseBody>, I>>(
    object: I,
  ): DeleteApplicationResponseBody {
    const message = createBaseDeleteApplicationResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    return message;
  },
};

/**
 * 节点自带的应用和后面发布的应用，夜莺社区提供一个节点和一组组网协议。当然其他的社团或者个人，也可以基于源代码，发布自己的节点和一组组网协议，当然
 * 也可以加入到夜莺社区的网络。
 */
export type ApplicationService = typeof ApplicationService;
export const ApplicationService = {
  /** 搜索应用 */
  search: {
    path: "/yeying.api.application.Application/Search",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SearchApplicationRequest) => Buffer.from(SearchApplicationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SearchApplicationRequest.decode(value),
    responseSerialize: (value: SearchApplicationResponse) =>
      Buffer.from(SearchApplicationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SearchApplicationResponse.decode(value),
  },
  /** 创建应用 */
  create: {
    path: "/yeying.api.application.Application/Create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateApplicationRequest) => Buffer.from(CreateApplicationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateApplicationRequest.decode(value),
    responseSerialize: (value: CreateApplicationResponse) =>
      Buffer.from(CreateApplicationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateApplicationResponse.decode(value),
  },
  /** 应用详情 */
  detail: {
    path: "/yeying.api.application.Application/Detail",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ApplicationDetailRequest) => Buffer.from(ApplicationDetailRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ApplicationDetailRequest.decode(value),
    responseSerialize: (value: ApplicationDetailResponse) =>
      Buffer.from(ApplicationDetailResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ApplicationDetailResponse.decode(value),
  },
  /** 删除应用 */
  delete: {
    path: "/yeying.api.application.Application/Delete",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteApplicationRequest) => Buffer.from(DeleteApplicationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteApplicationRequest.decode(value),
    responseSerialize: (value: DeleteApplicationResponse) =>
      Buffer.from(DeleteApplicationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteApplicationResponse.decode(value),
  },
} as const;

export interface ApplicationServer extends UntypedServiceImplementation {
  /** 搜索应用 */
  search: handleUnaryCall<SearchApplicationRequest, SearchApplicationResponse>;
  /** 创建应用 */
  create: handleUnaryCall<CreateApplicationRequest, CreateApplicationResponse>;
  /** 应用详情 */
  detail: handleUnaryCall<ApplicationDetailRequest, ApplicationDetailResponse>;
  /** 删除应用 */
  delete: handleUnaryCall<DeleteApplicationRequest, DeleteApplicationResponse>;
}

export interface ApplicationClient extends Client {
  /** 搜索应用 */
  search(
    request: SearchApplicationRequest,
    callback: (error: ServiceError | null, response: SearchApplicationResponse) => void,
  ): ClientUnaryCall;
  search(
    request: SearchApplicationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SearchApplicationResponse) => void,
  ): ClientUnaryCall;
  search(
    request: SearchApplicationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SearchApplicationResponse) => void,
  ): ClientUnaryCall;
  /** 创建应用 */
  create(
    request: CreateApplicationRequest,
    callback: (error: ServiceError | null, response: CreateApplicationResponse) => void,
  ): ClientUnaryCall;
  create(
    request: CreateApplicationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateApplicationResponse) => void,
  ): ClientUnaryCall;
  create(
    request: CreateApplicationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateApplicationResponse) => void,
  ): ClientUnaryCall;
  /** 应用详情 */
  detail(
    request: ApplicationDetailRequest,
    callback: (error: ServiceError | null, response: ApplicationDetailResponse) => void,
  ): ClientUnaryCall;
  detail(
    request: ApplicationDetailRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ApplicationDetailResponse) => void,
  ): ClientUnaryCall;
  detail(
    request: ApplicationDetailRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ApplicationDetailResponse) => void,
  ): ClientUnaryCall;
  /** 删除应用 */
  delete(
    request: DeleteApplicationRequest,
    callback: (error: ServiceError | null, response: DeleteApplicationResponse) => void,
  ): ClientUnaryCall;
  delete(
    request: DeleteApplicationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteApplicationResponse) => void,
  ): ClientUnaryCall;
  delete(
    request: DeleteApplicationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteApplicationResponse) => void,
  ): ClientUnaryCall;
}

export const ApplicationClient = makeGenericClientConstructor(
  ApplicationService,
  "yeying.api.application.Application",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ApplicationClient;
  service: typeof ApplicationService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
