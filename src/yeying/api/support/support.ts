// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: yeying/api/support/support.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { MessageHeader, ResponseStatus } from "../common/message";

export const protobufPackage = "yeying.api.support";

export enum SupportCodeEnum {
  /** SUPPORT_CODE_FAQ - Frequently Asked Questions, 通常包含了最常见的问题以及相应的解答，帮助客户快速找到答案 */
  SUPPORT_CODE_FAQ = 0,
  /** SUPPORT_CODE_CSR - Customer Service Representative, 通过电话、电子邮件、在线聊天等方式与客户进行沟通，并解决客户的问题和需求 */
  SUPPORT_CODE_CSR = 1,
  /** SUPPORT_CODE_IVR - Interactive Voice Response, 使用预先录制的语音和语音识别技术，引导客户通过按键选择或语音输入，实现自助查询、转接、留言等功能，提高客户体验 */
  SUPPORT_CODE_IVR = 2,
  UNRECOGNIZED = -1,
}

export function supportCodeEnumFromJSON(object: any): SupportCodeEnum {
  switch (object) {
    case 0:
    case "SUPPORT_CODE_FAQ":
      return SupportCodeEnum.SUPPORT_CODE_FAQ;
    case 1:
    case "SUPPORT_CODE_CSR":
      return SupportCodeEnum.SUPPORT_CODE_CSR;
    case 2:
    case "SUPPORT_CODE_IVR":
      return SupportCodeEnum.SUPPORT_CODE_IVR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SupportCodeEnum.UNRECOGNIZED;
  }
}

export function supportCodeEnumToJSON(object: SupportCodeEnum): string {
  switch (object) {
    case SupportCodeEnum.SUPPORT_CODE_FAQ:
      return "SUPPORT_CODE_FAQ";
    case SupportCodeEnum.SUPPORT_CODE_CSR:
      return "SUPPORT_CODE_CSR";
    case SupportCodeEnum.SUPPORT_CODE_IVR:
      return "SUPPORT_CODE_IVR";
    case SupportCodeEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface CollectSupportRequest {
  header: MessageHeader | undefined;
  body: CollectSupportRequestBody | undefined;
}

export interface CollectSupportRequestBody {
  code: SupportCodeEnum;
  data?: { $case: "faq"; faq: FaqMetadata } | undefined;
}

export interface FaqMetadata {
  did: string;
  email: string;
  type: string;
  description: string;
  createdAt: string;
  signature: string;
}

export interface CollectSupportResponse {
  header: MessageHeader | undefined;
  body: CollectSupportResponseBody | undefined;
}

export interface CollectSupportResponseBody {
  status: ResponseStatus | undefined;
}

function createBaseCollectSupportRequest(): CollectSupportRequest {
  return { header: undefined, body: undefined };
}

export const CollectSupportRequest: MessageFns<CollectSupportRequest> = {
  encode(message: CollectSupportRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      CollectSupportRequestBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CollectSupportRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollectSupportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = CollectSupportRequestBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CollectSupportRequest {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? CollectSupportRequestBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: CollectSupportRequest): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = CollectSupportRequestBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CollectSupportRequest>, I>>(base?: I): CollectSupportRequest {
    return CollectSupportRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CollectSupportRequest>, I>>(object: I): CollectSupportRequest {
    const message = createBaseCollectSupportRequest();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? CollectSupportRequestBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseCollectSupportRequestBody(): CollectSupportRequestBody {
  return { code: 0, data: undefined };
}

export const CollectSupportRequestBody: MessageFns<CollectSupportRequestBody> = {
  encode(message: CollectSupportRequestBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    switch (message.data?.$case) {
      case "faq":
        FaqMetadata.encode(message.data.faq, writer.uint32(26).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CollectSupportRequestBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollectSupportRequestBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = { $case: "faq", faq: FaqMetadata.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CollectSupportRequestBody {
    return {
      code: isSet(object.code) ? supportCodeEnumFromJSON(object.code) : 0,
      data: isSet(object.faq) ? { $case: "faq", faq: FaqMetadata.fromJSON(object.faq) } : undefined,
    };
  },

  toJSON(message: CollectSupportRequestBody): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = supportCodeEnumToJSON(message.code);
    }
    if (message.data?.$case === "faq") {
      obj.faq = FaqMetadata.toJSON(message.data.faq);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CollectSupportRequestBody>, I>>(base?: I): CollectSupportRequestBody {
    return CollectSupportRequestBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CollectSupportRequestBody>, I>>(object: I): CollectSupportRequestBody {
    const message = createBaseCollectSupportRequestBody();
    message.code = object.code ?? 0;
    switch (object.data?.$case) {
      case "faq": {
        if (object.data?.faq !== undefined && object.data?.faq !== null) {
          message.data = { $case: "faq", faq: FaqMetadata.fromPartial(object.data.faq) };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseFaqMetadata(): FaqMetadata {
  return { did: "", email: "", type: "", description: "", createdAt: "", signature: "" };
}

export const FaqMetadata: MessageFns<FaqMetadata> = {
  encode(message: FaqMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.did !== "") {
      writer.uint32(10).string(message.did);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.createdAt !== "") {
      writer.uint32(42).string(message.createdAt);
    }
    if (message.signature !== "") {
      writer.uint32(50).string(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FaqMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFaqMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.did = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FaqMetadata {
    return {
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
    };
  },

  toJSON(message: FaqMetadata): unknown {
    const obj: any = {};
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FaqMetadata>, I>>(base?: I): FaqMetadata {
    return FaqMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FaqMetadata>, I>>(object: I): FaqMetadata {
    const message = createBaseFaqMetadata();
    message.did = object.did ?? "";
    message.email = object.email ?? "";
    message.type = object.type ?? "";
    message.description = object.description ?? "";
    message.createdAt = object.createdAt ?? "";
    message.signature = object.signature ?? "";
    return message;
  },
};

function createBaseCollectSupportResponse(): CollectSupportResponse {
  return { header: undefined, body: undefined };
}

export const CollectSupportResponse: MessageFns<CollectSupportResponse> = {
  encode(message: CollectSupportResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      MessageHeader.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      CollectSupportResponseBody.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CollectSupportResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollectSupportResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = MessageHeader.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = CollectSupportResponseBody.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CollectSupportResponse {
    return {
      header: isSet(object.header) ? MessageHeader.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? CollectSupportResponseBody.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: CollectSupportResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = MessageHeader.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = CollectSupportResponseBody.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CollectSupportResponse>, I>>(base?: I): CollectSupportResponse {
    return CollectSupportResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CollectSupportResponse>, I>>(object: I): CollectSupportResponse {
    const message = createBaseCollectSupportResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? MessageHeader.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? CollectSupportResponseBody.fromPartial(object.body)
      : undefined;
    return message;
  },
};

function createBaseCollectSupportResponseBody(): CollectSupportResponseBody {
  return { status: undefined };
}

export const CollectSupportResponseBody: MessageFns<CollectSupportResponseBody> = {
  encode(message: CollectSupportResponseBody, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CollectSupportResponseBody {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollectSupportResponseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CollectSupportResponseBody {
    return { status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined };
  },

  toJSON(message: CollectSupportResponseBody): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CollectSupportResponseBody>, I>>(base?: I): CollectSupportResponseBody {
    return CollectSupportResponseBody.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CollectSupportResponseBody>, I>>(object: I): CollectSupportResponseBody {
    const message = createBaseCollectSupportResponseBody();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    return message;
  },
};

export type SupportService = typeof SupportService;
export const SupportService = {
  collect: {
    path: "/yeying.api.support.Support/Collect",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CollectSupportRequest) => Buffer.from(CollectSupportRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CollectSupportRequest.decode(value),
    responseSerialize: (value: CollectSupportResponse) => Buffer.from(CollectSupportResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CollectSupportResponse.decode(value),
  },
} as const;

export interface SupportServer extends UntypedServiceImplementation {
  collect: handleUnaryCall<CollectSupportRequest, CollectSupportResponse>;
}

export interface SupportClient extends Client {
  collect(
    request: CollectSupportRequest,
    callback: (error: ServiceError | null, response: CollectSupportResponse) => void,
  ): ClientUnaryCall;
  collect(
    request: CollectSupportRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CollectSupportResponse) => void,
  ): ClientUnaryCall;
  collect(
    request: CollectSupportRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CollectSupportResponse) => void,
  ): ClientUnaryCall;
}

export const SupportClient = makeGenericClientConstructor(SupportService, "yeying.api.support.Support") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): SupportClient;
  service: typeof SupportService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
