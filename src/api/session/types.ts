/* eslint-disable */
// tslint:disable
/**
 * Yeying API
 * 
 *
 * OpenAPI spec version: 1.0
 * Contact: yeying.community@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator+.
 * https://github.com/karlvr/openapi-generator-plus
 * Do not edit the class manually.
 */

import { Express } from 'express'
import { Api } from '../../models'

export interface SessionApi {
	sessionCreate: (request: Api.SessionCreateSessionRequest) => Promise<SessionCreateResponse>
	sessionDelete: (request: Api.SessionDeleteSessionRequest) => Promise<SessionDeleteResponse>
	sessionDetail: (request: Api.SessionSessionDetailRequest) => Promise<SessionDetailResponse>
	sessionSearch: (request: Api.SessionSearchSessionRequest) => Promise<SessionSearchResponse>
	sessionUpdate: (request: Api.SessionUpdateSessionRequest) => Promise<SessionUpdateResponse>
}

export type SessionCreateResponse = SessionCreate200Response | SessionCreateDefaultResponse

export interface SessionCreate200Response {
	status: 200
	body: Api.SessionCreateSessionResponse
	headers?: never
}

export interface SessionCreateDefaultResponse {
	/* Catch-all response */
	status: 'default'
	actualStatus: number
	body: Api.RpcStatus
	headers?: never
}

export type SessionDeleteResponse = SessionDelete200Response | SessionDeleteDefaultResponse

export interface SessionDelete200Response {
	status: 200
	body: Api.SessionDeleteSessionResponse
	headers?: never
}

export interface SessionDeleteDefaultResponse {
	/* Catch-all response */
	status: 'default'
	actualStatus: number
	body: Api.RpcStatus
	headers?: never
}

export type SessionDetailResponse = SessionDetail200Response | SessionDetailDefaultResponse

export interface SessionDetail200Response {
	status: 200
	body: Api.SessionSessionDetailResponse
	headers?: never
}

export interface SessionDetailDefaultResponse {
	/* Catch-all response */
	status: 'default'
	actualStatus: number
	body: Api.RpcStatus
	headers?: never
}

export type SessionSearchResponse = SessionSearch200Response | SessionSearchDefaultResponse

export interface SessionSearch200Response {
	status: 200
	body: Api.SessionSearchSessionResponse
	headers?: never
}

export interface SessionSearchDefaultResponse {
	/* Catch-all response */
	status: 'default'
	actualStatus: number
	body: Api.RpcStatus
	headers?: never
}

export type SessionUpdateResponse = SessionUpdate200Response | SessionUpdateDefaultResponse

export interface SessionUpdate200Response {
	status: 200
	body: Api.SessionUpdateSessionResponse
	headers?: never
}

export interface SessionUpdateDefaultResponse {
	/* Catch-all response */
	status: 'default'
	actualStatus: number
	body: Api.RpcStatus
	headers?: never
}

